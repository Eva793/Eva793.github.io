<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://eva793.github.io/</id>
    <title>Gridea</title>
    <updated>2019-10-07T15:52:27.832Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://eva793.github.io/"/>
    <link rel="self" href="https://eva793.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://eva793.github.io//images/avatar.png</logo>
    <icon>https://eva793.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[如何使用 Jacman 主题]]></title>
        <id>https://eva793.github.io//post/2015-09-20-how-to-use-jacman</id>
        <link href="https://eva793.github.io//post/2015-09-20-how-to-use-jacman">
        </link>
        <updated>2019-10-07T15:50:35.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="主题介绍">主题介绍</h2>
<p>Jekyll-Jacman 是为 <a href="http://jekyllrb.com">Jekyll</a> 设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman 始于 <a href="https://github.com/wuchong/jacman">Jacman</a> 移植而来。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="主题介绍">主题介绍</h2>
<p>Jekyll-Jacman 是为 <a href="http://jekyllrb.com">Jekyll</a> 设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman 始于 <a href="https://github.com/wuchong/jacman">Jacman</a> 移植而来。</p>
<!-- more -->
<h2 id="配置指南">配置指南</h2>
<p>Jacman 主题提供了丰富的配置属性，可以实现您对主题的自定义。配置文件<code>_config.yml</code>位于主题根目录下。本次更新对配置文件进行了较大调整，如您之前就使用了 Jacman，也需要您根据以下指南进行相应的修改。</p>
<pre><code>##### 菜单
menu:
  主页: /
  归档: /archives
  关于: /about

#### 控件
widgets: 
- category
- tag
- links
- rss

#### RSS 
rss: /atom.xml 

#### 图片相关
imglogo:
  enable: true               ## 是否显示网站 logo
  src: img/logo.png        
favicon: img/favicon.ico     ## 网站图标    
apple_icon: img/jacman.jpg   ## 苹果设备上的图标，背景不要透明
author_img: img/author.jpg   ## 网站底部的博主头像
banner_img: img/banner.jpg   ## 博客顶部的图片

close_aside: false      ##是否在文章页面自动关闭侧边栏

#### 首页相关
index:
  expand: true              ## 首页文章是否展开。默认为展开式，显示 Read More。
  excerpt_link: Read More    

#### 作者信息
author:
  name: ## 作者名
  intro_line1:  &quot;Hello ,I'm Larry Page in Google.&quot;    ## 网站底部的个人介绍
  intro_line2:  &quot;This is my blog,believe it or not.&quot;  
  weibo_verifier:  ## 微博秀的验证码
  tsina:           ## 用于微博秀和微博分享
  weibo:           ## 用于显示网站底部社交按钮，下同
  douban:         
  zhihu:  
  email:     
  twitter:   
  github:     
  facebook: 
  linkedin:   
  google_plus:   
  stackoverflow:  


#### 目录
toc:
  article: true   ## 是否在文章中显示目录
  aside: true     ## 是否在侧边栏显示目录

#### 友情链接
links:
  码农圈: https://coderq.com,一个面向程序员交流分享的新一代社区
  Jark's Blog: http://wuchong.me
  
#### 评论
duoshuo_shortname: 
disqus_shortname:  

#### 分享按钮
jiathis:
  enable: false   ## 默认使用主题内建分享
  id:    
  tsina: 
  
#### 网站统计
google_analytics:
  enable: false
  id:            ## google analytics ID.
  site:          ## 网站地址.
baidu_tongji:
  enable: false
  sitecode:      ## 百度统计站点特征码
cnzz_tongji:
  enable: false
  siteid:        ## CNZZ统计站点ID

#### 杂项
ShowCustomFont: true  
fancybox: true        
totop: true           

#### 自定义搜索
google_cse: 
  enable: false
  cx:  
baidu_search:    
  enable: false
  id:   
  site: http://zhannei.baidu.com/cse/search 
tinysou_search:     ## http://tinysou.com/
  enable: false
  id: &quot;4ac092ad8d749fdc6293&quot; 
</code></pre>
<h3 id="属性功能">属性功能</h3>
<ul>
<li><strong>菜单 menu</strong><br>
默认没有启用 <code>/tags</code> 和 <code>/categories</code>页面，如果需要启用请在博客目录下分别建立<code>tags</code> 和 <code>categories</code>文件夹每个文件夹中分别包含一个<code>index.md</code>文件。内容为：</li>
</ul>
<pre><code>layout: tags (或categories)
title: tags (或categories)
---
</code></pre>
<p>      因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。</p>
<ul>
<li><strong>控件 widgets</strong><br>
提供了7种小工具。包括标签、分类、RSS、友情链接、微博秀。</li>
</ul>
<p><strong>友情链接</strong>：友情链接的网址添加可以在<code>links</code>属性下添加。</p>
<p><strong>微博秀</strong>：需要注意的是，如果要启用微博秀，您必须填上<code>author</code>属性下<code>tsina</code>和<code>weibo_verifier</code>的值，前者是您微博ID，后者是您微博秀的验证码，访问 http://app.weibo.com/tool/weiboshow 在如下图位置，可以获得您的 verifier，如：我的是<code>b3593ceb</code>。<br>
<img src="http://ww1.sinaimg.cn/large/81b78497jw1emegd6b0ytj209204pweu.jpg" alt=""></p>
<p>如果要关闭侧边栏，将<code>close_aside</code>置为<code>true</code>，就会在博文页面自动关闭侧边栏。</p>
<ul>
<li>
<p><strong>图片相关 Image</strong><br>
本主题可以设置网站相关图片，例如网站图标（<code>favicon</code>）、网站logo（<code>imglogo</code>）、作者头像（<code>author_img</code>）。建议启用网站logo，格式建议为<code>.svg</code>或<code>.png</code>格式。同时建议提供配套的 favicon 以及在苹果设备上的图标<code>apple_icon</code>（背景不要透明）。</p>
</li>
<li>
<p><strong>首页显示模式 Index</strong><br>
目前首页的显示模式支持两种，一种是原先的卡片式（前往 <a href="http://wuchong.me/jacman">Demo</a> 预览），另一种是类似官方主题的文章展开式（<a href="http://wuchong.me">本站</a>即采用的这种）。两者各有优劣，前者首页加载速度更快，后者文章内容更能吸引读者。主题默认采用后一种展开式，如需开启第一种卡片式，请设置<code>index</code>属性下的<code>expand: false</code>。</p>
</li>
</ul>
<p>卡片式的文章摘要是截取文章内容的前140个字，也可以自己总结<code>description</code>并将其放在开头的<code>front-matter</code>中。展开式的文章摘要就是使用<code>&lt;!-- more --&gt;</code>截取了。</p>
<ul>
<li>
<p><strong>作者信息 author</strong><br>
作者信息，建议尽量填写完整。其中<code>tsina</code>是你的新浪微博ID，不同于用户名或微博主页地址。启用这个属性后，其他用户在微博上分享你文章的同时会自动@你。同时它和<code>weibo_verifier</code>一起作用生成微博秀。<code>intro_line1</code>和<code>intro_line2</code>是网站底部的个人介绍。<code>weibo</code>、<code>twitter</code>、<code>facebook</code>等是用来显示网站右下角的社交按钮的，如下图所示。<br>
<img src="http://ww4.sinaimg.cn/large/81b78497jw1emgscr3575j2078050jrc.jpg" alt=""></p>
</li>
<li>
<p><strong>目录 toc</strong><br>
是否启用在文章中或侧边栏中的目录功能。二者可以都为<code>true</code>或都为<code>false</code>。同时，如果你希望在特定的某一篇文章中关闭目录功能你可以在文章文件开头中的<code>front-matter</code>中加上一行<code>toc: false</code>。</p>
</li>
<li>
<p><strong>评论 comments</strong><br>
填写<code>duoshuo_shortname</code><a href="http://duoshuo.com/">多说</a>的用户名，启用多说评论系统。在大陆地区更好用的评论系统。</p>
</li>
</ul>
<p>填写<code>disqus_shortname</code><a href="http://disqus.com/">disqus</a> 的用户名，启用 disqus 评论系统。国际上更广泛使用的评论系统。设置博客根目录下的<code>_config.yml</code>文件中的<code>disqus_shortname</code>同样也能开启该功能。</p>
<ul>
<li>
<p><strong>加网分享 jiathis</strong><br>
<a href="http://www.jiathis.com/">加网</a>分享系统。默认关闭，因为主题已经内置了原生的分享功能。</p>
</li>
<li>
<p><strong>网站统计 Analytics</strong><br>
<code>google_analytics</code>：Google Analytics追踪代码。请注意：Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码，更多信息请<a href="https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN">点击这里</a>了解。</p>
</li>
</ul>
<p><code>baidu_tongji</code>：百度统计功能。需要填写站点特征码<code>sitecode</code>，在<a href="http://tongji.baidu.com/web/welcome/login">官网</a>注册并配置站点后，获取特征码。特征码可以在「网站中心」-&gt; 「代码获取」中查看，如下图所示的<code>e6d1f421bbc9962127a50488f9ed37d1</code>，注意去掉前面的<code>3F</code>。<br>
<img src="http://ww4.sinaimg.cn/large/81b78497jw1emf4v6qf91j20kf07sq8v.jpg" alt=""></p>
<p><code>cnzz_tongji</code>：站长统计功能。需要填写站点ID<code>siteid</code>，同理在<a href="http://www.cnzz.com">站长官网</a>注册并配置站点后获得。</p>
<ul>
<li>
<p><strong>数学公式 mathjax</strong><br>
主题支持写 LaTex 数学公式。只需要在文章文件开头的<code>front-matter</code>中，加上一行<code>mathjax: true</code>，即可在文中写 LaTex 公式。</p>
</li>
<li>
<p><strong>图片浏览 fancybox</strong><br>
默认关闭，如果你经常发表 Gallery 类型的文章，那么请设置为<code>true</code>。</p>
</li>
<li>
<p><strong>返回顶部 totop</strong><br>
右下角<code>返回顶部</code>按钮，默认开启。</p>
</li>
<li>
<p><strong>自定义搜索 Search</strong><br>
<code>baidu_search</code>：如果开启百度站内搜索需要登录 <a href="http://zn.baidu.com/">百度站内搜索</a>，配置好你的站点，并开启站内搜索获取搜索ID，另外<code>site</code>属性可以填默认值，也可以填自己做了CNAME的二级域名，更详细的可以阅读<a href="http://gengbiao.me/hexo/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/">这篇博客</a>了解。</p>
</li>
</ul>
<p><code>google_cse</code>：如果开启谷歌自定义搜索需要先登录 <a href="https://www.google.com/cse/">Google CSE</a>，配置好你的站点，并获得此自定义搜索的ID。此外你需要在博客目录下建立<code>search</code>文件夹并包含一个<code>index.md</code>文件。内容为：</p>
<pre><code>layout: search
title: search
---
</code></pre>
<p><code>tiny_search</code>: 如果要开启<a href="http://tinysou.com/">微搜索</a>，需要先注册一个帐号，配置一个Engine，将Engine的Key填入配置文件中的<code>id</code>即可。</p>
<h2 id="常见问题">常见问题</h2>
<ul>
<li>
<p><strong>Q：图片默认都是居左的，我怎么设置能让图片居中呢？</strong></p>
<blockquote>
<p>使用 <code>&lt;img src=&quot;&quot; style=&quot;display:block;margin:auto&quot;/&gt;</code>的HTML标签。</p>
</blockquote>
</li>
<li>
<p><strong>Q：如何建立一篇图片类文章（Gallery Post）？</strong></p>
<blockquote>
<p>直接新建一个 Markdown 文件，将其<code>front-matter</code>修改为如下，即可看到主题为图片类文章提供的样式。</p>
<pre><code></code></pre>
</blockquote>
<hr>
<p>layout: photo<br>
title: Gallery Post<br>
photos:</p>
<ul>
<li>http://i.minus.com/ibobbTlfxZgITW.jpg</li>
<li>http://i.minus.com/iedpg90Y0exFS.jpg</li>
</ul>
<hr>
<blockquote>
<pre><code></code></pre>
</blockquote>
</li>
<li>
<p><strong>Q：我在配置文件中给某一项设置了值，但为什么总是看不到效果啊？</strong></p>
<blockquote>
<p><code>_config.yml</code>文件中的每个属性值前面必须留一个空格，建议在 Sublime/Notepad++ 中开启显示所有空格模式。另每篇文章的 <code>front-matter</code> 也要注意这个问题。</p>
</blockquote>
</li>
<li>
<p><strong>Q：怎么提意见和建议？</strong></p>
<blockquote>
<p>主题还在不断完善中，欢迎 <a href="https://github.com/Simpleyyt/jekyll-jacman/issues">open issue</a> 来提建议，参与讨论。</p>
</blockquote>
</li>
<li>
<p><strong>Q：为什么我修改了配置文件/发表了博文，解析出来的却是乱码呢？</strong></p>
<blockquote>
<p>请将你的配置文件/markdown文件保存成 <code>UTF-8</code> 格式。</p>
</blockquote>
</li>
<li>
<p><strong>Q：为什么开启了微博秀后，显示是空白的，没有内容展示？</strong></p>
<blockquote>
<p>每次修改参数都会这样，需要多刷新几次或者上传到服务器上就好了。</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【DOS】DOS命令大全02]]></title>
        <id>https://eva793.github.io//post/dos-dos-ming-ling-da-quan-02</id>
        <link href="https://eva793.github.io//post/dos-dos-ming-ling-da-quan-02">
        </link>
        <updated>2019-10-07T15:47:31.000Z</updated>
        <content type="html"><![CDATA[<hr>
<p>title: '【DOS】DOS命令大全02'<br>
date: 2013-10-09 23:17<br>
tags: [DOS命令02]<br>
published: true<br>
hideInList: false<br>
feature:</p>
<hr>
<p><strong>批处理高级教程精选合编</strong><br>
本教程适合对dos有一定基础的人慢慢学习或查阅。<br>
查阅方法：复制目录中的条目，搜索即可。</p>
<hr>
<h2 id="第一章-批处理基础">第一章 批处理基础</h2>
<h3 id="第一节-常用批处理内部命令简介">第一节 常用批处理内部命令简介</h3>
<p>批处理定义：顾名思义，批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为BAT或者CMD。这些命令统称批处理命令。<br>
小知识：可以在键盘上按下<code>Ctrl+C组合键来强行终止一个批处理的执行过程。</code><br>
了解了大概意思后,我们正式开始学习.先看一个简单的例子!</p>
<pre><code>@echo off
echo &quot;Hallo Word!&quot;
pause
</code></pre>
<p>把上面的3条命令保存为文件<code>test.bat</code>或者<code>test.cmd</code>然后执行,<br>
他就会在屏幕上显示以下二行话:</p>
<blockquote>
<p>Hallo Word!!<br>
请按任意键继续. . .</p>
</blockquote>
<p>这就是一个简单批处理文件了，这个批处理文件一共就用了2条命令&quot;echo&quot; 和&quot;pause&quot;还有一个特殊符号&quot;@&quot;<br>
从上面这个简单的批处理中,我们可以发现其实批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成,那么在批处理中<br>
　　有多少这样的特殊符号和功能命令呢？我们现在就来仔细了解一下一些最常用的!<br>
(以下内容来源网络,请各位仔细阅读,好进入下节的实例说明)</p>
<hr>
<p><strong>介绍命令</strong></p>
<h4 id="1-rem-和">1、REM 和 ::</h4>
<p>REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。<br>
其次, :: 也可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意：</p>
<p>第一, 任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。<br>
有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。<br>
无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，所以 :: 常被用作注释符号，其实 :+ 也可起注释作用。<br>
　　第二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中。</p>
<h4 id="2-echo-和">2、ECHO 和 @</h4>
<p>打开回显或关闭回显功能，或显示消息。如果没有任何参数，echo命令将显示当前回显设置。<br>
@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。<br>
语法:</p>
<pre><code>echo [{ on|off }] [message]
echo.   #此用法将显示一空行，相当于回车，非常有用。
</code></pre>
<p>执行<code>echo off</code>将关闭回显，它后面的所有命令都不显示命令本身，只显示执行后的结果，除非执行<code>echo on</code>命令。<br>
执行<code>@echo off</code>不但关闭以后命令的回显，连<code>echo off</code>命令本身也不显示了。<br>
通常以<code>@echo off</code>作为批处理程序的首行。<br>
一般用<code>ECHO MESSAGE</code>来显示一个特定的消息。<br>
例：</p>
<pre><code>@Echo off
Echo hello
Pause
运行显示：hello
</code></pre>
<h4 id="3-pause">3、&quot;PAUSE&quot;</h4>
<p><code>PAUSE</code>，玩游戏的人都知道，暂停的意思<br>
在这里就是停止系统命令的执行并显示下面的内容。</p>
<p>例：</p>
<pre><code>PAUSE
运行显示：
请按任意键继续. . .
</code></pre>
<p>要显示其他提示语，可以这样用：<br>
<code>Echo 其他提示语 &amp; pause &gt; nul</code></p>
<h4 id="4-errorlevel">4、errorlevel</h4>
<p>程序返回码<br>
<code>echo %errorlevel%</code><br>
每个命令运行结束，可以用这个命令行格式查看返回码<br>
用于判断刚才的命令是否执行成功<br>
默认值为0，一般命令执行出错会设 errorlevel 为1</p>
<h4 id="5-title">5、title</h4>
<p>设置cmd窗口的标题<code>title 新标题</code>#可以看到cmd窗口的标题栏变了</p>
<h4 id="6-color">6、COLOR</h4>
<p>设置默认的控制台前景和背景颜色。<br>
COLOR [attr]<br>
attr        指定控制台输出的颜色属性<br>
颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为前景。每个数字可以为以下任何值之一:</p>
<blockquote>
<p>0 = 黑色       8 = 灰色<br>
1 = 蓝色       9 = 淡蓝色<br>
2 = 绿色       A = 淡绿色<br>
3 = 湖蓝色     B = 淡浅绿色<br>
4 = 红色       C = 淡红色<br>
5 = 紫色       D = 淡紫色<br>
6 = 黄色       E = 淡黄色<br>
7 = 白色       F = 亮白色</p>
</blockquote>
<p>如果没有给定任何参数，该命令会将颜色还原到CMD.EXE启动时的颜色。这个值来自当前控制台窗口、/T 开关或DefaultColor注册表值。<br>
如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令会将 ERRORLEVEL 设置为 1。<br>
例如: &quot;COLOR fc&quot; 在亮白色上产生亮红色</p>
<h4 id="7-mode-配置系统设备">7、mode 配置系统设备</h4>
<p>配置系统设备。</p>
<pre><code>串行口:　　　　　　MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]
　　　　　　　　　　　　　　　　　　[to=on|off] [xon=on|off] [odsr=on|off]
　　　　　　　　　　　　　　　　　　[octs=on|off] [dtr=on|off|hs]
　　　　　　　　　　　　　　　　　　[rts=on|off|hs|tg] [idsr=on|off]
设备状态:　　　　　MODE [device] [/STATUS]
打印重定向:　　　　MODE LPTn[:]=COMm[:]
选定代码页:　　　　MODE CON[:] CP SELECT=yyy
代码页状态:　　　　MODE CON[:] CP [/STATUS]
显示模式:　　　　　MODE CON[:] [COLS=c] [LINES=n]
击键率:　　　　　　MODE CON[:] [RATE=r DELAY=d]
</code></pre>
<h4 id="8-goto-和">8、GOTO 和 :</h4>
<p>GOTO会点编程的朋友就会知道这是跳转的意思。<br>
在批处理中允许以<code>:XXX来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，</code>然后执行标号后的命令。<br>
例：<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/IGx.G1tshRweRDB2DvRqwoHmBP9kAQADFmzgauCHY1s!/o/dL4AAAAAAAAA&amp;bo=tAA0ALQANAADEDU!" alt=""><br>
标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样别人看起来才会理解你的意图啊。</p>
<p>例：</p>
<pre><code>@echo off
:start
set /a var+=1
echo %var%
if %var% leq 3 GOTO start
pause
</code></pre>
<p>运行显示：<br>
1<br>
2<br>
3<br>
4</p>
<h4 id="9-find">9、find</h4>
<p>在文件中搜索字符串。<br>
<code>FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] &quot;string&quot; [[drive:][path]filename[ ...]]</code></p>
<pre><code>/V                         显示所有未包含指定字符串的行。
/C                         仅显示包含字符串的行数。
/N                         显示行号。
/I                         搜索字符串时忽略大小写。
/OFF[LINE]                 不要跳过具有脱机属性集的文件。
&quot;string&quot;                   指定要搜索的文字串，
[drive:][path]filename     指定要搜索的文件。
</code></pre>
<p>如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。</p>
<pre><code>Find常和type命令结合使用
Type [drive:][path]filename | find &quot;string&quot; [&gt;tmpfile] #挑选包含string的行
Type [drive:][path]filename | find /v &quot;string&quot;   #剔除文件中包含string的行
Type [drive:][path]filename | find /c   #显示文件行数
以上用法将去除find命令自带的提示语（文件名提示）
</code></pre>
<p>例：</p>
<pre><code>@echo off
echo 111 &gt;test.txt
echo 222 &gt;&gt;test.txt
find &quot;111&quot; test.txt
del test.txt
pause

</code></pre>
<p>运行显示如下：<br>
---------- TEST.TXT<br>
111<br>
请按任意键继续. . .</p>
<p>例：</p>
<pre><code>@echo off
echo 111 &gt;test.txt
echo 222 &gt;&gt;test.txt
type test.txt|find &quot;111&quot;
del test.txt
pause

</code></pre>
<p>运行显示如下：<br>
111<br>
请按任意键继续. . .</p>
<h4 id="10-start-命令">10、start 命令</h4>
<p>批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令<br>
例：<code>start explorer d:\</code><br>
调用图形界面打开D盘</p>
<h4 id="11-assoc-和-ftype">11、assoc 和 ftype</h4>
<p>文件关联</p>
<p>assoc 设置<code>文件扩展名</code>关联，关联到<code>文件类型</code><br>
ftype 设置<code>文件类型</code>关联，关联到<code>执行程序和参数</code><br>
当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开<br>
而是先判断.txt属于 txtfile <code>文件类型</code><br>
再调用 txtfile 关联的命令行<code>txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1</code><br>
可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联</p>
<pre><code>assoc               #显示所有'文件扩展名'关联
assoc .txt          #显示.txt代表的'文件类型'，结果显示 .txt=txtfile
assoc .do           #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8
assoc .exe          #显示.exe代表的'文件类型'，结果显示 .exe=exefile
ftype               #显示所有'文件类型'关联
ftype exefile       #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*
assoc .txt=Word.Document.8

</code></pre>
<p>设置.txt为word类型的文档，可以看到.txt文件的图标都变了<br>
<code>assoc .txt=txtfile</code><br>
恢复.txt的正确关联<br>
<code>ftype exefile=&quot;%1&quot; %*</code><br>
恢复 exefile 的正确关联<br>
如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p>
<h4 id="12-pushd-和-popd">12、pushd 和 popd</h4>
<p>切换当前目录</p>
<pre><code>@echo off
c: &amp; cd\ &amp; md mp3       #在 C:\ 建立 mp3 文件夹
md d:\mp4               #在 D:\ 建立 mp4 文件夹
cd /d d:\mp4            #更改当前目录为 d:\mp4
pushd c:\mp3            #保存当前目录，并切换当前目录为 c:\mp3
popd                    #恢复当前目录为刚才保存的 d:\mp4

</code></pre>
<p>一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）</p>
<h4 id="13-call">13、CALL</h4>
<p>CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理<br>
<code>CALL [drive:][path]filename [batch-parameters]</code><br>
调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。<br>
<code>CALL :label arguments</code><br>
调用本文件内命令段，相当于子程序。被调用的命令段以标签:label开头<br>
以命令goto :eof结尾。<br>
另外，批脚本文本参数参照(%0、%1、等等)已如下改变:</p>
<pre><code>     批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 ...)

     批参数(%n)的替代已被增强。您可以使用以下语法:（看不明白的直接运行后面的例子）

         %~1         - 删除引号(&quot;)，扩充 %1
         %~f1        - 将 %1 扩充到一个完全合格的路径名
         %~d1        - 仅将 %1 扩充到一个驱动器号
         %~p1        - 仅将 %1 扩充到一个路径
         %~n1        - 仅将 %1 扩充到一个文件名
         %~x1        - 仅将 %1 扩充到一个文件扩展名
         %~s1        - 扩充的路径指含有短名
         %~a1        - 将 %1 扩充到文件属性
         %~t1        - 将 %1 扩充到文件的日期/时间
         %~z1        - 将 %1 扩充到文件的大小
         %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1
                       扩充到找到的第一个完全合格的名称。如果环境
                       变量名未被定义，或者没有找到文件，此组合键会
                       扩充到空字符串

    可以组合修定符来取得多重结果:

        %~dp1       - 只将 %1 扩展到驱动器号和路径
        %~nx1       - 只将 %1 扩展到文件名和扩展名
        %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，
                       并扩展到找到的第一个文件的驱动器号和路径。
        %~ftza1     - 将 %1 扩展到类似 DIR 的输出行。

    在上面的例子中，%1 和 PATH 可以被其他有效数值替换。

</code></pre>
<p><code>%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*</code>使用<br>
注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展<br>
要理解上面的知识，下面的例子很关键。<br>
例：</p>
<pre><code>@echo off
Echo 产生一个临时文件 &gt; tmp.txt
Rem 下行先保存当前目录，再将c:\windows设为当前目录
pushd c:\windows
Call :sub tmp.txt
Rem 下行恢复前次的当前目录
Popd
Call :sub tmp.txt
pause
Del tmp.txt

:sub
Echo 删除引号： %~1
Echo 扩充到路径： %~f1
Echo 扩充到一个驱动器号： %~d1
Echo 扩充到一个路径： %~p1
Echo 扩充到一个文件名： %~n1
Echo 扩充到一个文件扩展名： %~x1
Echo 扩充的路径指含有短名： %~s1
Echo 扩充到文件属性： %~a1
Echo 扩充到文件的日期/时间： %~t1
Echo 扩充到文件的大小： %~z1
Echo 扩展到驱动器号和路径：%~dp1
Echo 扩展到文件名和扩展名：%~nx1
Echo 扩展到类似 DIR 的输出行：%~ftza1
Echo.
Goto :eof

</code></pre>
<h4 id="14-shift">14、shift</h4>
<p>更改批处理文件中可替换参数的位置。<br>
SHIFT [/n]<br>
如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉<br>
命令从第 n 个参数开始移位；n 介于零和八之间。例如:<br>
SHIFT /2<br>
会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。</p>
<h4 id="15-if">15、IF</h4>
<p>IF 条件判断语句，语法格式如下：</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command

</code></pre>
<p>下面逐一介绍，更详细的分析请看后面章节。</p>
<h5 id="1-if-not-errorlevel-number-command">(1) IF [NOT] ERRORLEVEL number command</h5>
<p>IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。<br>
Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立<br>
例：</p>
<pre><code>@echo off
dir c:
rem退出代码为&gt;=1就跳至标题1处执行，&gt;=0就跳至标题0处执行
IF ERRORLEVEL 1 goto 1
IF ERRORLEVEL 0 goto 0
Rem 上面的两行不可交换位置，否则失败了也显示成功。
:0
echo 命令执行成功！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:1
echo 命令执行失败！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:exit
pause

</code></pre>
<p>运行显示：命令执行成功！</p>
<h5 id="2-if-not-string1string2-command">(2) IF [NOT] string1==string2 command</h5>
<p>string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思）<br>
条件相等后即执行后面的command<br>
检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式</p>
<pre><code>if [NOT] {string1}=={string2} command
if [NOT] [string1]==[string2] command
if [NOT] “string1”==“string2” command

</code></pre>
<p>这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：<br>
<code>if {string1}==[string2] command</code></p>
<h5 id="3-if-not-exist-filename-command">(3) IF [NOT] EXIST filename command</h5>
<p>EXIST filename为文件或目录存在的意思</p>
<pre><code>echo off
IF EXIST autoexec.bat echo 文件存在！
IF not EXIST autoexec.bat echo 文件不存在！

</code></pre>
<p>这个批处理大家可以放在C盘和D盘分别执行，看看效果</p>
<h4 id="16-setlocal-与-变量延迟">16、setlocal 与 变量延迟</h4>
<p>例1:</p>
<pre><code>@echo off
set a=4
set a=5 &amp; echo %a%
pause

</code></pre>
<p>结果：4<br>
解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？</p>
<p>让我们先了解一下批处理运行命令的机制：<br>
批处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在处理之前要完成必要的预处理工作，这其中就包括对该行命令中的变量赋值。我们现在分析一下例1，批处理在运行到这句<code>“set a=5 &amp; echo %a%”</code>之前，先把这一句整句读取并做了预处理——对变量a赋了值，那么%a%当然就是4了！（没有为什么，批处理就是这样做的。）</p>
<p>而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。</p>
<p>那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：<br>
例2:</p>
<pre><code>@echo off
setlocal enabledelayedexpansion
set a=4
set a=5 &amp; echo !a!
pause

</code></pre>
<p>结果：5<br>
解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是<code>“setlocal enabledelayedexpansion”</code>，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。</p>
<p>分析一下例2，首先<code>“setlocal enabledelayedexpansion”</code>开启变量延迟，然后<code>“set a=4”</code>先给变量a赋值为4，<code>“set a=5 &amp; echo !a!”</code>这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。</p>
<p>再举一个例子巩固一下。<br>
例3:</p>
<pre><code>@echo off
setlocal enabledelayedexpansion
for /l %%i in (1,1,5) do (
set a=%%i
echo !a!
)
pause

</code></pre>
<p>结果：<br>
1<br>
2<br>
3<br>
4<br>
5<br>
解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什么结果呢？结果是这样的：<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
即没有感知到for语句中的动态变化。</p>
<h3 id="第二节-常用特殊符号">第二节 常用特殊符号</h3>
<h4 id="1-命令行回显屏蔽符">1、@命令行回显屏蔽符</h4>
<p>这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求</p>
<h4 id="2-批处理变量引导符">2、%批处理变量引导符</h4>
<p>这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。<br>
引用变量用%var%，调用程序外部参数用%1至%9等等</p>
<pre><code>%0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %*为命令行传递给批处理的参数
%0 批处理文件本身，包括完整的路径和扩展名
%1 第一个参数
%9 第九个参数
%* 从第一个参数开始的所有参数

</code></pre>
<p>参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。<br>
例：最简单的复制文件自身的方法<br>
<code>copy %0 d:\wind.bat</code></p>
<h4 id="3-重定向符">3、&gt;重定向符</h4>
<p>输出重定向命令<br>
这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）<br>
在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&amp;,&amp;&amp;,||和语句块的制约限制。</p>
<p>比如：<br>
使用命令：echo hello &gt;1.txt将建立文件1.txt，内容为“hello”（注意行尾有一空格）<br>
使用命令：echo hello&gt;1.txt将建立文件1.txt，内容为“hello”（注意行尾没有空格）</p>
<h4 id="4-重定向符">4、&gt;&gt;重定向符</h4>
<p>输出重定向命令<br>
这个符号的作用和&gt;有点类似，但他们的区别是&gt;&gt;是传递并在文件的末尾追加，而&gt;是覆盖</p>
<p>用法同上<br>
同样拿1.txt做例子<br>
使用命令：</p>
<pre><code>echo hello &gt; 1.txt
echo world &gt;&gt;1.txt

</code></pre>
<p>这时候1.txt 内容如下:<br>
hello<br>
world</p>
<h4 id="5-重定向符">5、&lt;、&gt;&amp;、&lt;&amp; 重定向符</h4>
<p>这三个命令也是管道命令，但它们一般不常用。<br>
&lt;，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。</p>
<pre><code>@echo off
echo 2005-05-01&gt;temp.txt
date &lt;temp.txt
del temp.txt

</code></pre>
<p>这样就可以不等待输入直接修改当前日期</p>
<pre><code>&gt;&amp;，将一个句柄的输出写入到另一个句柄的输入中。
&lt;&amp;，刚好和&gt;&amp;相反，从一个句柄读取输入并将其写入到另一个句柄输出中。

</code></pre>
<p>常用句柄：0、1、2，未定义句柄：3—9<br>
1&gt;nul 表示禁止输出正确的信息<br>
2&gt;nul 表示禁止输出错误信息。<br>
其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。</p>
<pre><code>句柄0：标准输入stdin，键盘输入
句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）
句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）

</code></pre>
<p>其中的stdin可被&lt;重定向，stdout可被&gt;、&gt;&gt;重定向，而stderr在DOS下不可直接重定向，只有通过ctty或其它命令将系统控制权转交给其它设备的方式，来间接完成。</p>
<h4 id="6-命令管道符">6、|命令管道符</h4>
<p>格式：第一条命令 | 第二条命令 [| 第三条命令...]<br>
将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。</p>
<p>例如：<br>
<code>dir c:\|find &quot;txt&quot;</code><br>
以上命令是：查找C：\所有，并发现TXT字符串。<br>
FIND的功能请用 FIND /? 自行查看<br>
在不使format的自动格式化参数时，我是这样来自动格式化A盘的<br>
<code>echo y|format a: /s /q /v:system</code><br>
用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令<br>
从而达到自动输入y的目的<code>（这条命令有危害性，测试时请慎重）</code></p>
<h4 id="7-转义字符">7、^转义字符</h4>
<p>^是对特殊符号&lt;,&gt;,&amp;的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。<br>
比如<br>
<code>echo test ^&gt;1.txt</code><br>
结果则是：test &gt; 1.txt<br>
他没有追加在1.txt里，呵呵。只是显示了出来<br>
另外，此转义字符还可以用作续行符号。<br>
举个简单的例子：</p>
<pre><code>@echo off
echo 英雄^
是^
好^
男人
pause

</code></pre>
<h4 id="8-组合命令">8、&amp;组合命令</h4>
<p>语法：第一条命令 &amp; 第二条命令 [&amp; 第三条命令...]<br>
&amp;、&amp;&amp;、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批<br>
处理认行不认命令数目。<br>
这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。<br>
这里&amp;两边的命令是顺序执行的，从前往后执行。<br>
比如：<br>
<code>dir z:\ &amp; dir y:\ &amp; dir c:\</code><br>
以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在</p>
<h4 id="9-组合命令">9、&amp;&amp; 组合命令</h4>
<p>语法：第一条命令 &amp;&amp; 第二条命令 [&amp;&amp; 第三条命令...]<br>
用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令<br>
这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行<br>
<code>dir z:\ &amp;&amp; dir y:\ &amp;&amp; dir c:\</code></p>
<h4 id="10-组合命令">10、||  组合命令</h4>
<p>语法：第一条命令 || 第二条命令 [|| 第三条命令...]<br>
用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；<br>
提示：组合命令和重定向命令一起使用必须注意优先级<br>
管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令<br>
问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。你将如何来搞定这道题？有朋友说，这还不是很easy的问题吗？同时执行两个dir，然后把得到的结果&gt;到a.txt里就ok了嘛，看例：<br>
<code>dir c:\ &amp;&amp; dir d:\ &gt; a.txt</code><br>
仔细研究一下这句执行后的结果，看看是否能达到题目的要求！错了！这样执行后a.txt里只有D盘的信息！为什么？就因为这里&amp;&amp;命令和&gt;命令不能同时出现一个句子里（批处理把一行看成一个句子）！！组合命令&amp;&amp;的优先级没有管道命令&gt;的优先级高。<br>
所以这句在执行时将本行分成这两部分：dir c:\和dir d:\ &gt; a.txt，而并不是如你想的这两部分：dir c:\ &amp;&amp; dir d:\和&gt; a.txt。要使用组合命令&amp;&amp;达到题目的要求，必须得这么写：<br>
<code>dir c:\ &gt; a.txt &amp;&amp; dir d:\ &gt;&gt; a.txt</code><br>
这样，依据优先级高低，DOS将把这句话分成以下两部分：dir c:\ &gt; a.txt和dir d:\ &gt;&gt; a.txt。例十八中的几句的差别比较特殊，值得好好<br>
研究体会一下。<br>
当然这里还可以利用&amp;命令（自己想一下道理哦）：<br>
<code>dir c:\ &gt; a.txt &amp; dir d:\ &gt;&gt; a.txt</code></p>
<h4 id="11-字符串界定符">11、&quot;&quot;  字符串界定符</h4>
<p>双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法</p>
<pre><code>cd &quot;program files&quot;
cd progra~1
cd pro*

</code></pre>
<p>以上三种方法都可以进入program files这个目录</p>
<h4 id="12-逗号">12、, 逗号</h4>
<p>逗号相当于空格，在某些情况下“,”可以用来当做空格使<br>
比如<br>
<code>dir,c:\</code></p>
<h4 id="13-分号">13、; 分号</h4>
<p>分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了）</p>
<p>比如：<br>
<code>dir c:\;d:\;e:\;z:\</code></p>
<p>以上命令相当于<br>
dir c:\<br>
dir d:\<br>
dir e:\<br>
dir f:\<br>
如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。</p>
<p>例：<code>dir c:\;d:\;e:\1.txt</code><br>
以上命令相当于<br>
dir c:\<br>
dir d:\<br>
dir e:\1.txt<br>
其中文件e:\1.txt不存在，但e盘存在，有错误提示，但命令仍会执行。</p>
<p>为什么？如果目标路径不存在，则终止执行；如果路径存在，文件不存在，则继续执行。</p>
<h4 id="14-括号">14、() 括号</h4>
<p>小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。<br>
括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。<br>
例：</p>
<pre><code>命令：echo 1 &amp; echo 2 &amp; echo 3
可以写成：
(
echo 1
echo 2
echo 3
)

</code></pre>
<p>上面两种写法效果一样，这两种写法都被视为是一条命令行。<br>
注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。</p>
<h4 id="15-感叹号">15、! 感叹号</h4>
<p>没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的setlocal命令介绍。</p>
<h2 id="第二章-dos循环for命令详解">第二章 DOS循环：for命令详解</h2>
<p>看了看第一节的东西,发现那些简单的命令都有详细解释,实在想不出什么更好的东西来解释他们,就直接来一个&quot;FOR命令详解&quot;在其中运用这些东西来解释吧!</p>
<p>讲FOR之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在CMD下面输入:name /? 这样的格式来看系统给出的帮助文件,比如for /?   就会把FOR命令的帮助全部显示出来!当然许多菜鸟同志都看不懂....所以才会有那么多批处理文章!!!!俺也照顾菜鸟,把FOR命令用我自己的方式说明下!</p>
<p>正式开始:<br>
FOR这条命令基本上都被用来处理文本,我们这次除了要说他处理文本的作用外还要讲他的其他一些好用的功能!<br>
看看他的基本格式(这里我引用的是批处理中的格式,直接在命令行只需要一个%号)<br>
FOR 参数 %%变量名 IN (相关文件或命令)  DO 执行的命令</p>
<p>参数:FOR有4个参数 /d   /l   /r   /f   他们的作用我在下面用例子解释<br>
%%变量名 :这个变量名可以是单个的小写a-z或者大写A-Z,他们区分大小写哦~, FOR会把每个读取到的值给他!<br>
IN:命令的格式,照写就是了!<br>
(相关文件或命令) :FOR要把什么东西读取然后赋值给变量,不懂的话看下面的例子<br>
do:命令的格式,照写就是了!<br>
执行的命令:对每个变量的值要执行什么操作就写在这.<br>
看不懂我的这些说明,可以在CMD输入for /?看系统提供的帮助!我这里也给出来吧,大家对照</p>
<pre><code>FOR %%variable IN (set) DO command [command-parameters]

  %%variable  指定一个单一字母可替换的参数。
  (set)      指定一个或一组文件。可以使用通配符。
  command    指定对每个文件执行的命令。
  command-parameters
             为特定命令指定参数或命令行开关。

</code></pre>
<p>现在开始讲每个参数的意思<br>
一、参数 /d<br>
<code>FOR /D %variable IN (set) DO command [command-parameters]</code><br>
如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。<br>
如果 Set (也就是我上面写的 &quot;相关文件或命令&quot;) 包含通配符（* 和 ?），将对与 Set 相匹配的每个目录（而不是指定目录中的文件组）执行指定的 Command。<br>
这个参数主要用于目录搜索,不会搜索文件,看这样的例子</p>
<pre><code>@echo off
for /d %%i in (c:\*) do echo %%i
pause

</code></pre>
<p>运行会把C盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!<br>
在来一个,比如我们要把当前路径下文件夹的名字只有1-3个字母的打出来</p>
<pre><code>@echo off
for /d %%i in (???) do echo %%i
pause

</code></pre>
<p>这样的话如果你当前目录下有目录名字只有1-3个字母的,就会显示出来,没有就不显示了<br>
这里解释下<code>*号和?号的作用,*</code>号表示任意N个字符,而?号只表示任意一个字符<br>
知道作用了,给大家个思考题目!</p>
<pre><code>@echo off
for /d %%i in (window?) do echo %%i
pause

</code></pre>
<p>保存到C盘下执行,会显示什么呢?自己看吧! 显示：windows<br>
/D参数只能显示当前目录下的目录名字,这个大家要注意!</p>
<p>二、参数 /R<br>
<code>FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]</code></p>
<pre><code>    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前

</code></pre>
<p>目录。如果集仅为一个单点(.)字符，则枚举该目录树。</p>
<p>递归</p>
<p>上面我们知道,/D只能显示当前路径下的目录名字,那么现在这个/R也是和目录有关,他能干嘛呢?放心他比/D强大多了!<br>
他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!</p>
<blockquote>
<p>请注意2点：<br>
1、set中的文件名如果含有通配符(？或*)，则列举/R参数指定的目录及其下面的所用子目录中与set相符合的所有文件，无相符文件的目录则不列举。<br>
2、相反，如果set中为具体文件名，不含通配符，则枚举该目录树（即列举该目录及其下面的所有子目录），而不管set中的指定文件是否存在。这与前面所说的单点（.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。</p>
</blockquote>
<p>例：</p>
<pre><code>@echo off
for /r c:\ %%i in (*.exe) do echo %%i
pause

</code></pre>
<p>咱们把这个BAT保存到D盘随便哪里然后执行,我会就会看到,他把C盘根目录,和每个目录的子目录下面全部的EXE文件都列出来了!!!!</p>
<p>例：</p>
<pre><code>@echo off
for /r %%i in (*.exe) do @echo %%i
pause

</code></pre>
<p>参数不一样了吧!这个命令前面没加那个C:\也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个BAT你把他放在d:\test目录下执行,<br>
那么他就会把D:\test目录和他下面的子目录的全部EXE文件列出来!!!</p>
<p>例：</p>
<pre><code>@echo off
for /r c:\ %%i in (boot.ini) do echo %%i
pause

</code></pre>
<p>运行本例发现枚举了c盘所有目录，为了只列举boot.ini存在的目录，可改成下面这样：</p>
<pre><code>@echo off
for /r c:\ %%i in (boot.ini) do if exist %%i echo %%i
pause

</code></pre>
<p>用这条命令搜索文件真不错。。。。。。<br>
这个参数大家应该理解了吧!还是满好玩的命令!</p>
<p>三、参数 /L<br>
<code>FOR /L %variable IN (start,step,end) DO command [command-parameters]</code></p>
<blockquote>
<p>该集表示以增量形式从开始到结束的一个数字序列。<br>
因此，(1,1,5) 将产生序列 1 2 3 4 5，(5,-1,1) 将产生<br>
序列 (5 4 3 2 1)。</p>
</blockquote>
<p>使用迭代变量设置起始值 (Start#)，然后逐步执行一组范围的值，直到该值超过所设置的终止值 (End#)。/L 将通过对 Start# 与 End# 进行<br>
比较来执行迭代变量。如果 Start# 小于 End#，就会执行该命令。如果迭代变量超过 End#，则命令解释程序退出此循环。还可以使用负的<br>
Step# 以递减数值的方式逐步执行此范围内的值。例如，(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)。语法是：<br>
看着这说明有点晕吧!咱们看例子就不晕了!</p>
<pre><code>@echo off
for /l %%i in (1,1,5) do @echo %%i
pause

</code></pre>
<p>保存执行看效果,他会打印从1 2 3 4 5  这样5个数字<br>
(1,1,5)这个参数也就是表示从1开始每次加1直到5终止!<br>
等会晕,就打印个数字有P用...好的满足大家,看这个例子</p>
<pre><code>@echo off
for /l %%i in (1,1,5) do start cmd
pause

</code></pre>
<p>执行后是不是吓了一跳,怎么多了5个CMD窗口,呵呵!如果把那个 (1,1,5)改成 (1,1,65535)会有什么结果,我先告诉大家,会打开65535个CMD窗口<br>
....这么多你不死机算你强!<br>
当然我们也可以把那个start cmd改成md %%i 这样就会建立指定个目录了!!!名字为1-65535<br>
看完这个被我赋予破坏性质的参数后,我们来看最后一个参数</p>
<p>四、参数 /F</p>
<p>迭代及文件解析<br>
使用文件解析来处理命令输出、字符串及文件内容。使用迭代变量定义要检查的内容或字符串，并使用各种options选项进一步修改解析方式。</p>
<p>使用options令牌选项指定哪些令牌应该作为迭代变量传递。请注意：在没有使用令牌选项时，/F 将只检查第一个令牌。<br>
文件解析过程包括读取输出、字符串或文件内容，将其分成独立的文本行以及再将每行解析成零个或更多个令牌。然后通过设置为令牌的迭代<br>
变量值，调用 for 循环。默认情况下，/F 传递每个文件每一行的第一个空白分隔符号。跳过空行。</p>
<p>详细的帮助格式为：</p>
<pre><code>FOR /F [&quot;options&quot;] %variable IN (file-set) DO command [command-parameters]
FOR /F [&quot;options&quot;] %variable IN (&quot;string&quot;) DO command [command-parameters]
FOR /F [&quot;options&quot;] %variable IN ('command') DO command [command-parameters]

</code></pre>
<p>带引号的字符串&quot;options&quot;包括一个或多个<br>
指定不同解析选项的关键字。这些关键字为:</p>
<pre><code>        eol=c           - 指一个行注释字符的结尾(就一个)
        skip=n          - 指在文件开始时忽略的行数。
        delims=xxx      - 指分隔符集。这个替换了空格和跳格键的
                          默认分隔符集。
        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代
                          的 for 本身。这会导致额外变量名称的分配。m-n
                          格式为一个范围。通过 nth 符号指定 mth。如果
                          符号字符串中的最后一个字符星号，
                          那么额外的变量将在最后一个符号解析之后
                          分配并接受行的保留文本。

        usebackq        - 使用后引号（键盘上数字1左面的那个键`）。

                          未使用参数usebackq时：file-set表示文件，但不能含有空格
                            双引号表示字符串，即&quot;string&quot;
                            单引号表示执行命令，即'command'

                          使用参数usebackq时：file-set和&quot;file-set&quot;都表示文件
                          当文件路径或名称中有空格时，就可以用双引号括起来
                            单引号表示字符串，即'string'
                            后引号表示命令执行，即`command`

</code></pre>
<p>以上是用for /?命令获得的帮助信息，直接复制过来的。<br>
晕惨了!我这就举个例子帮助大家来理解这些参数!</p>
<p>For命令例1：****************************************</p>
<pre><code>@echo off
rem 首先建立临时文件test.txt
echo ;注释行,这是临时文件,用完删除 &gt;test.txt
echo 11段 12段 13段 14段 15段 16段 &gt;&gt;test.txt
echo 21段,22段,23段,24段,25段,26段 &gt;&gt;test.txt
echo 31段-32段-33段-34段-35段-36段 &gt;&gt;test.txt
FOR /F &quot;eol=; tokens=1,3* delims=,- &quot; %%i in (test.txt) do echo %%i %%j %%k
Pause
Del test.txt

</code></pre>
<p>运行显示结果：</p>
<p>11段 13段 14段 15段 16段<br>
21段 23段 24段,25段,26段<br>
31段 33段 34段-35段-36段<br>
请按任意键继续. . .</p>
<p>为什么会这样?我来解释：</p>
<pre><code>eol=;          分号开头的行为注释行
tokens=1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k
delims=,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后

</code></pre>
<p>For命令例2：****************************************</p>
<pre><code>@echo off
FOR /F &quot;eol= delims=&quot; %%i in (test.txt) do echo %%i
Pause

</code></pre>
<p>运行将显示test.txt全部内容，包括注释行，不解释了哈。</p>
<p>For命令例3：****************************************<br>
另外/F参数还可以以输出命令的结果看这个例子</p>
<pre><code>@echo off
FOR /F &quot;delims=&quot; %%i in ('net user') do @echo %%i
pause

</code></pre>
<p>这样你本机全部帐号名字就出来了把扩号内的内容用两个单引号引起来就表示那个当命令执行,FOR会返回命令的每行结果,加那个&quot;delims=&quot; 是为了让我空格的行能整行显示出来,不加就只显示空格左边一列!<br>
基本上讲完了FOR的基本用法了...如果你看过FOR的系统帮助,你会发现他下面还有一些特定义的变量,这些我先不讲。</p>
<h2 id="第三章-for命令中的变量">第三章 FOR命令中的变量</h2>
<p>FOR命令中有一些变量,他们的用法许多新手朋友还不太了解,今天给大家讲解他们的用法!</p>
<p>我们可以看到每行都有一个大写字母&quot;I&quot;,这个I其实就是我们在FOR带入的变量,我们FOR语句代入的变量名是什么,这里就写什么.<br>
比如:<code>FOR /F %%z IN ('set') DO @echo %%z</code><br>
这里我们代入的变量名是z那么我们就要把那个I改成z,例如%<sub>fI改为%</sub>fz<br>
至于前面的%~p这样的内容就是语法了!</p>
<p>好开始讲解:</p>
<h3 id="一-~i-删除任何引号扩展-i">一、~I 删除任何引号(&quot;)，扩展 %I</h3>
<p>这个变量的作用就如他的说明,删除引号!<br>
我们来看这个例子:<br>
首先建立临时文件temp.txt，内容如下<br>
&quot;1111<br>
&quot;2222&quot;<br>
3333&quot;<br>
&quot;4444&quot;44<br>
&quot;55&quot;55&quot;55</p>
<p>可建立个BAT文件代码如下:</p>
<pre><code>@echo off
echo ^&quot;1111&gt;temp.txt
echo &quot;2222&quot;&gt;&gt;temp.txt
echo 3333^&quot;&gt;&gt;temp.txt
echo &quot;4444&quot;44&gt;&gt;temp.txt
echo ^&quot;55&quot;55&quot;55&gt;&gt;temp.txt
rem 上面建立临时文件，注意不成对的引号要加转义字符^，重定向符号前不要留空格
FOR /F &quot;delims=&quot; %%i IN (temp.txt) DO echo  %%~i
pause
del temp.txt

</code></pre>
<p>执行后,我们看CMD的回显如下:</p>
<pre><code>1111           #字符串前的引号被删除了
2222           #字符串首尾的引号都被删除了
3333&quot;          #字符串前无引号，后面的引号保留
4444&quot;44        #字符串前面的引号删除了，而中间的引号保留
55&quot;55&quot;55       #字符串前面的引号删除了，而中间的引号保留
请按任意键继续. . .

</code></pre>
<p>和之前temp.txt中的内容对比一下,我们会发现第1、2、5行的引号都消失了,这就是删除引号~i的作用了!<br>
删除引号规则如下(BAT兄补充!)<br>
1、若字符串首尾同时存在引号，则删除首尾的引号；<br>
2、若字符串尾不存在引号，则删除字符串首的引号；<br>
3、如果字符串中间存在引号，或者只在尾部存在引号，则不删除。<br>
<code>补充：无头不删，有头连尾删。</code></p>
<h3 id="二-~fi-将-i-扩展到一个完全合格的路径名">二、 %~fI 将 %I 扩展到一个完全合格的路径名</h3>
<p>看例子:<br>
把代码保存放在随便哪个地方,我这里就放桌面吧.</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~fi
pause

</code></pre>
<p>执行后显示内容如下<br>
C:\Documents and Settings\Administrator\桌面\test.bat<br>
C:\Documents and Settings\Administrator\桌面\test.vbs<br>
当我把代码中的 %%~fi直接改成%%i<br>
<code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo %%i pause</code></p>
<p>执行后就会显示以下内容：<br>
test.bat<br>
test.vbs</p>
<p>通过对比,我们很容易就看出没有路径了,这就是&quot;将 %I 扩展到一个完全合格的路径名&quot;的作用<br>
也就是如果%i变量的内容是一个文件名的话,他就会把这个文件所在的绝对路径打印出来,而不只单单打印一个文件名,自己动手动实验下就知道了!</p>
<h3 id="三-~di-仅将-i-扩展到一个驱动器号">三、 %~dI 仅将 %I 扩展到一个驱动器号</h3>
<p>看例子:<br>
代码如下,我还是放到桌面执行!</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~di
pause

</code></pre>
<p>执行后我CMD里显示如下<br>
C:<br>
C:<br>
我桌面就两个文件<code>test.bat,test.vbs,%%~di</code>作用是,如果变量%%i的内容是一个文件或者目录名,他就会把他这文件<br>
或者目录所在的盘符号打印出来!</p>
<h3 id="四-~pi-仅将-i-扩展到一个路径">四、 %~pI 仅将 %I 扩展到一个路径</h3>
<p>这个用法和上面一样,他只打印路径不打印文件名字</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~pi
pause

</code></pre>
<p>我就不打结果了,大家自己复制代码看结果吧,下面几个都是这么个用法,代码给出来,大家自己看结果吧!</p>
<h3 id="五-~ni-仅将-i-扩展到一个文件名">五、 %~nI 仅将 %I 扩展到一个文件名</h3>
<p>只打印文件名字</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ni
pause

</code></pre>
<h3 id="六-~xi-仅将-i-扩展到一个文件扩展名">六、 %~xI 仅将 %I 扩展到一个文件扩展名</h3>
<p>只打印文件的扩展名</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~xi
pause

</code></pre>
<h3 id="七-~si-扩展的路径只含有短名">七、 %~sI 扩展的路径只含有短名</h3>
<p>打印绝对短文件名</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~si
pause

</code></pre>
<h3 id="八-~ai-将-i-扩展到文件的文件属性">八、 %~aI 将 %I 扩展到文件的文件属性</h3>
<p>打印文件的属性</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ai
pause

</code></pre>
<h3 id="九-~ti-将-i-扩展到文件的日期时间">九、 %~tI 将 %I 扩展到文件的日期/时间</h3>
<p>打印文件建立的日期</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ti
pause

</code></pre>
<h3 id="十-~zi-将-i-扩展到文件的大小">十、 %~zI 将 %I 扩展到文件的大小</h3>
<p>打印文件的大小</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~zi
pause

</code></pre>
<p><code>补充：上面例子中的&quot;delims==&quot;可以改为&quot;delims=&quot;，即不要分隔符</code></p>
<h3 id="十一-~pathi-查找列在路径环境变量的目录并将-i-扩展到找到的第一个完全合格的名称-如果环境变量名未被定义或者没有找到文件此组合键会扩展到空字符串">十一、 %~$PATH:I - 查找列在路径环境变量的目录，并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串</h3>
<p>这是最后一个,和上面那些都不一样,我单独说说!<br>
然后在把这些代码保存为批处理,放在桌面。</p>
<pre><code>@echo off
FOR /F &quot;delims=&quot; %%i IN (“notepad.exe”) DO echo  %%~$PATH:i
pause

</code></pre>
<p>补充：上面代码显示结果为C:\WINDOWS\system32\notepad.exe<br>
他的意思就在PATH变量里指定的路径里搜索notepad.exe文件，如果有notepad.exe则会把他所在绝对路径打印出来，没有就打印一个错误！<br>
好了,FOR的的变量就介绍到这了!</p>
<h2 id="第四章-批处理中的变量">第四章 批处理中的变量</h2>
<p>批处理中的变量,我把他分为两类,分别为&quot;系统变量&quot;和&quot;自定义变量&quot;<br>
我们现在来详解这两个变量!</p>
<h3 id="一-系统变量">一、系统变量</h3>
<p>他们的值由系统将其根据事先定义的条件自动赋值,也就是这些变量系统已经给他们定义了值,<br>
不需要我们来给他赋值,我们只需要调用而以!  我把他们全部列出来!</p>
<pre><code>%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。
%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。
%CD% 本地 返回当前目录字符串。
%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。
%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。
%COMPUTERNAME%  系统 返回计算机的名称。
%COMSPEC%  系统 返回命令行解释器可执行程序的准确路径。
%DATE%  系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关
date 命令的详细信息，请参阅 Date。
%ERRORLEVEL%  系统 返回上一条命令的错误代码。通常用非零值表示错误。
%HOMEDRIVE%  系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用
户主目录是在“本地用户和组”中指定的。
%HOMEPATH%  系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。
%HOMESHARE%  系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是
在“本地用户和组”中指定的。
%LOGONSERVER%  本地 返回验证当前登录会话的域控制器的名称。
%NUMBER_OF_PROCESSORS%  系统 指定安装在计算机上的处理器的数目。
%OS%  系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。
%PATH% 系统 指定可执行文件的搜索路径。
%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。
%PROCESSOR_ARCHITECTURE%  系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于
Itanium
%PROCESSOR_IDENTIFIER% 系统 返回处理器说明。
%PROCESSOR_LEVEL%  系统 返回计算机上安装的处理器的型号。
%PROCESSOR_REVISION% 系统 返回处理器的版本号。
%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。
%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。
%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。
%SYSTEMROOT%  系统 返回 Windows server operating system 根目录的位置。
%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。
有些应用程序需要 TEMP，而其他应用程序则需要 TMP。
%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关
time 命令的详细信息，请参阅 Time。
%USERDOMAIN% 本地 返回包含用户帐户的域的名称。
%USERNAME% 本地 返回当前登录的用户的名称。
%USERPROFILE% 本地 返回当前用户的配置文件的位置。
%WINDIR% 系统 返回操作系统目录的位置。
这么多系统变量,我们如何知道他的值是什么呢?
在CMD里输入  echo %WINDIR%
这样就能显示一个变量的值了!

</code></pre>
<p>举个实际例子,比如我们要复制文件到当前帐号的启动目录里就可以这样<br>
<code>copy d:\1.bat &quot;%USERPROFILE%\「开始」菜单\程序\启动\&quot; %USERNAME% 本地 返回当前登录的用户的名称。 注意有空格的目录要用引号引起来</code></p>
<p>另外还有一些系统变量,他们是代表一个意思,或者一个操作!<br>
他们分别是%0 %1 %2 %3 %4 %5 ......一直到%9 还有一个%*<br>
%0 这个有点特殊,有几层意思,先讲%1-%9的意思.<br>
%1 返回批处理的第一个参数<br>
%2 返回批处理的第二个参数<br>
%3-%9依此推类<br>
反回批处理参数?到底怎么个返回法?<br>
我们看这个例子,把下面的代码保存为test.BAT然后放到C盘下</p>
<pre><code>@echo off
echo %1 %2 %3 %4
echo %1
echo %2
echo %3
echo %4

</code></pre>
<p>进入CMD,输入cd c:\<br>
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>注意中间的空格,我们会看到这样的结果:<br>
我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数<br>
我是第一个参数<br>
我是第二个参数<br>
我是第三个参数<br>
我是第四个参数</p>
<p>对比下代码,%1就是”我是第一个参数”  %2就是”我是第二个参数”<br>
怎么样理解了吧!</p>
<p>这些%1和%9可以让批处理也能带参数运行,大大提高批处理功能!<br>
还有一个%*  他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数的值,不用在输入%1 %2来确定一个个的</p>
<p>例子</p>
<pre><code>@echo off
echo %*

</code></pre>
<p>同样保存为test.bat 放到C盘<br>
进入CMD,输入cd c:\<br>
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>可以看到他一次把全部参数都显示出来了<br>
好现在开始讲那个比较特殊的%0<br>
%0  这个不是返回参数的值了,他有两层意思!<br>
第一层意思:返回批处理所在绝对路径</p>
<p>例子:</p>
<pre><code>@echo off
echo %0
pause

</code></pre>
<p>保存为test.BAT放在桌面运行,会显示如下结果<br>
<code>&quot;C:\Documents and Settings\Administrator\桌面\test.bat&quot;</code><br>
他把当前批处理执行的所在路经打印出来了,这就是返回批处理所在绝对路径的意思<br>
第二层意思:无限循环执行BAT</p>
<p>例子:</p>
<pre><code>@echo off
net user
%0

</code></pre>
<p>保存为BAT执行,他就会无限循环执行net user这条命令,直到你手动停止.<br>
补充：其实%0就是第一参数%1前面那个参数，当然就是批处理文件名（包括路径）。</p>
<p>以上就是批处理中的一些系统变量,另外还有一些变量,他们也表示一些功能,<br>
FOR命令中的那些就是,FOR变量已经说过,就不讲了.</p>
<h3 id="二-自定义变量">二、自定义变量</h3>
<p>故名思意,自定义变量就是由我们来给他赋予值的变量<br>
要使用自定义变量就得使用set命令了,看例子.</p>
<pre><code>@echo off
set var=我是值
echo %var%
pause

</code></pre>
<p>保存为BAT执行,我们会看到CMD里返回一个  &quot;我是值&quot;</p>
<p>var为变量名,=号右变的是要给变量的值<br>
这就是最简单的一种设置变量的方法了</p>
<p>如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用set命令的/p参数</p>
<p>例子:</p>
<pre><code>@echo off
set /p var=请输入变量的值
echo %var%
pause

</code></pre>
<p>var变量名  =号右边的是提示语,不是变量的值<br>
变量的值由我们运行后自己用键盘输入!<br>
好了批处理的变量先介绍到这,关于set命令,下次再写个专门的文章吧.</p>
<h2 id="第五章-set命令详解">第五章 set命令详解</h2>
<p>在上一贴中我简单的介绍了一下SET设置自定义变量的作用,现在我来具体讲一下set的其他功能.</p>
<h3 id="一-用set命令设置自定义变量">一、用set命令设置自定义变量</h3>
<p>显示、设置或删除 cmd.exe 环境变量。</p>
<pre><code>SET [variable=[string]]
variable  指定环境变量名。
string    指定要指派给变量的一系列字符串。

</code></pre>
<p>要显示当前环境变量，键入不带参数的 SET。<br>
SET 命令不允许变量名含有等号。</p>
<p>例子:</p>
<pre><code>@echo off
set var=我是值
echo %var%
pause

</code></pre>
<p>请看 set var=我是值 ,这就是BAT直接在批处理中设置变量的方法!<br>
set 是命令   var是变量名  =号右边的&quot;我是值&quot;是变量的值<br>
在批处理中我们要引用这个变就把var变量名用两个%(百分号)扩起来,如%var%<br>
SET还可以提供一个交互界面,让用户自己输入变量的值,然后我们在来根据这个值来做相应操作,现在我就来说说SET的这种语法,只需要加一个&quot;/P&quot;参数就可以了!<br>
<code>SET /P variable=[promptString]</code></p>
<p>例子:</p>
<pre><code>@echo off
set /p var=请输入变量的值:
echo 您输入了 %var%  ~_~
pause

</code></pre>
<p>set /p 是命令语法  var是变量名    =号右边的&quot;请输入变量的值: &quot;,这个是提示语,不是变量的值了!<br>
运行后,我们在提示语后面直接输入1,就会显示一行您输入了 <code>1 ~_~</code><br>
好了,先回顾到这,现在讲SET其他功能</p>
<p>使用set /?查看SET的帮助我们发现SET除了我上面讲的<br>
SET [variable=[string]]<br>
SET /P variable=[promptString]<br>
这两种语法外,还有如下几种语法:<br>
<code>SET /A expression</code><br>
环境变量替换已如下增强:</p>
<pre><code>%PATH:str1=str2%
%PATH:~10,5%
%PATH:~-10%
%PATH:~0,-2%

</code></pre>
<p>这机种语法有什么用处呢?下面我们来一个个讲解他们!</p>
<h3 id="二-用set命令进行简单计算">二、用set命令进行简单计算</h3>
<p>语法：SET /A expression<br>
/A 命令行开关指定等号右边的字符串为被评估的数字表达式。该表达式<br>
评估器很简单并以递减的优先权顺序支持下列操作:</p>
<pre><code>    ()                  -分组
    ! ~ -               -一元运算符
    * / %               -算数运算符
    + -                 -算数运算符
    &lt;&lt; &gt;&gt;               -二进制逻辑移位
    &amp;                   -二进制按位“与”
    ^                   -二进制按位“异”
    |                   -二进制按位“或”
    = *= /= %= += -=    -算数赋值
    &amp;= ^= |= &lt;&lt;= &gt;&gt;=    -二进制运算赋值
    ,                   -表达式分隔符

</code></pre>
<p>上面这些是系统帮助里的内容,看着是不是有点晕，没关系我来简单解释一下:<br>
set的/A参数就是让SET可以支持数学符号进行加减等一些数学运算!</p>
<p>现在开始举例子介绍这些数学符号的用法:<br>
例：</p>
<pre><code>@echo off
set /p input=请输入计算表达式：
set /a var=%input%
echo 计算结果：%input%=%var%
pause

请看下面几个运算过程：
注意：DOS计算只能精确到整数

请输入计算表达式：1+9+20+30-10
计算结果：1+9+20+30-10=50
请按任意键继续. . .

请输入计算表达式：10/3
计算结果：10/3=3  #DOS计算精确到整数，小数舍了。
请按任意键继续. . .

请输入计算表达式：-100+62
计算结果：-100+62=-38
请按任意键继续. . .

请输入计算表达式：100%3    ＃求余数
计算结果：100%3=1
请按任意键继续. . .

请输入计算表达式：(25+75)*2/(15+5)
计算结果：(25+75)*2/(15+5)=10
请按任意键继续. . .

请输入计算表达式：1234567890*9876543210
无效数字。数字精确度限为 32 位。
计算结果：1234567890*9876543210=
请按任意键继续. . .

</code></pre>
<p>注意：上面的计算过程显示，DOS计算只能精确到32位，这个32位是指二进制32位，其中最高位为符号位（0为正，1为负），低位31位为数值。<br>
31个1换成十进制为2147483647，所以DOS计算的有效值范围是-2147483647至2147483647，超出该数值范围时计算出错，请看下面的计算过程：</p>
<p>请输入计算表达式：2147483647-1    ＃最大值减1，值有效<br>
计算结果：2147483647-1=2147483646<br>
请按任意键继续. . .</p>
<p>运行set /a a=1+1,b=2+1,c=3+1后会显示一个4,但我们用<br>
echo %a% %b% %c%后看结果,会发现其他数学运算也有效果!,这就是&quot;逗&quot;号的<br>
作用!</p>
<p>有时候我们需要直接在原变量进行加减操作就可以用这种语法<br>
set /a var+=1  这样的语法对应原始语法就是set /a var = %var% + 1<br>
都是一样的结果,在原变量的值上在进行数学运算,不过这样写简单一点<br>
再来一个:<br>
<code>set /a var*=2</code><br>
其他都这么用,只要帮助里有这个语法!<br>
另外还有一些用逻辑或取余操作符,这些符号,按照上面的使用方法会报错的</p>
<p>比如我们在CMD里输入set /a var=1 &amp; 1 &quot;与运算&quot;,他并不会显示为1,而是报错,<br>
为什么?对于这样的&quot;逻辑或取余操作符&quot;,我们需要把他们用双引号引起来,也可以用转义字符^，看例子</p>
<p>set /a var= 1 &quot;&amp;&quot; 1 这样结果就显示出来了,其他逻辑或取余操作符用法<br>
set /a var= 1 &quot;+&quot; 1 异运算<br>
set /a var= 1 &quot;%&quot; 1  取模运算<br>
set /a var= 3 &quot;&lt;&lt;&quot; 2 左移位运算， 3的二进制为11，左移2位为1100，换成十进制就是12，自行验证<br>
set /a var= 4 &quot;&gt;&gt;&quot; 2右移位运算，4的二进制为100，右移动2位为1，结果为1<br>
还有几个数学不太行,搞不清楚了....不列出来了,<br>
<code>补充：凡是按位计算均需换算成二进制，下面行中的符号均针对二进制</code><br>
这些符号也可以用&amp;= ^= |= &lt;&lt;= &gt;&gt;= 这样的简单用法如<br>
<code>set /a var&quot;&amp;=&quot; 1 等于set /a var = %var% &quot;&amp;&quot; 1</code>注意引号</p>
<p>思考题：求2的n次方<br>
答案：</p>
<pre><code>@echo off
set /p n=请输入2的几次方:
set /a num=1^&lt;^&lt;n
echo %num%
pause

</code></pre>
<h3 id="三-用set命令进行字符串处理">三、用set命令进行字符串处理</h3>
<h4 id="1-字符串替换">1、字符串替换</h4>
<p>好了，符号说到这，现在说<code>%PATH:str1=str2%</code><br>
上面语法的意思就是：将字符串变量%PATH%中的str1替换为str2<br>
这个是替换变量值的内容,看例子</p>
<pre><code>@echo off
set a= bbs. verybat. cn
echo 替换前的值: &quot;%a%&quot;
set var=%a: =%
echo 替换后的值: &quot;%var%&quot;
pause

</code></pre>
<p>运行显示：<br>
替换前的值: &quot; bbs. verybat. cn&quot;<br>
替换后的值: &quot;bbs.verybat.cn&quot;</p>
<p>对比一下,我们发现他把变量%a%的空格给替换掉了,从这个例子,我们就可以发现<br>
<code>%PATH:str1=str2%</code>这个操作就是把变量%PATH%的里的str1全部用str2替换</p>
<p>比如我们把上面的例子改成这样</p>
<pre><code>@echo off
set a=bbs.verybat.cn
echo 替换前的值: &quot;%a%&quot;
set var=%a:.=喵喵喵%
echo 替换后的值: &quot;%var%&quot;
pause

</code></pre>
<p>运行显示：<br>
替换前的值: &quot;bbs.verybat.cn&quot;<br>
替换后的值: &quot;bbs喵喵喵verybat喵喵喵cn&quot;</p>
<p>解释set var=%a:.=喵喵喵%<br>
set是命令 var是变量名 字a是要进行字符替换的变量的值,&quot;.&quot;为要替换的值,<br>
&quot;喵喵喵&quot;为替换后的值!<br>
执行后就会把变量%a%里面的&quot;.&quot;全部替换为&quot;喵喵喵&quot;<br>
这就是set的替换字符的很好的功能! 替换功能先讲到这，下面将字符串截取功能</p>
<h4 id="2-字符串截取">2、字符串截取</h4>
<hr>
<p>截取功能统一语法格式为：%a:~[m[,n]]%</p>
<hr>
<p>方括号表示可选，%为变量标识符，a为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）<br>
<code>%PATH:~10,5%</code>  这个什么意思,看例子:</p>
<p>截取功能例子1：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~1,2%
echo %var%
pause

</code></pre>
<p>执行后,我们会发现只显示了&quot;bs&quot;两个字母,我们的变量%a%的值不是为<code>bbs.verybat.cn</code>吗？<br>
怎么只显示了第2个字母和第3个字母&quot;bs&quot;,分析一结果我们就可以很容易看出<br>
<code>%PATH:~10,5%</code>就是显示变量PATH里从11位（偏移量10）开始的5个字符!<br>
分析<code>set var=%a:~1,2%</code><br>
set是命令，var是变量值，a要进行字符操作的变量，&quot;1&quot;从变量&quot;a&quot;第几位开始显示，&quot;2&quot;表示显示几位。<br>
合起来就是把变量a的值从第2位（偏移量1）开始,把2个字符赋予给变量var<br>
这样应该明白了吧~</p>
<p>其他两种语法<br>
%PATH:~-10%<br>
%PATH:~0,-2%<br>
他们也是显示指定变量指定几位的值的意思</p>
<p><code>%PATH:~-10%</code>看例子<br>
截取功能例子2：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~-3%
echo %var%
pause

</code></pre>
<p>运行结果：.cn<br>
这个就是把变量a倒数3位的值给变量VAR</p>
<p>当然我们也可以改成这样<br>
截取功能例子3：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~3%
echo %var%
pause

</code></pre>
<p>运行显示：.verybat.cn<br>
这个就是把变量a的从第3位开始后面全部的值给变量VAR<br>
<code>%PATH:~0,-2%</code>  例子</p>
<p>截取功能例子4：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~0,-3%
echo %var%
pause

</code></pre>
<p>执行后,我们发现显示的是&quot;bbs.verybat&quot;,少了&quot;.cn&quot;<br>
从结果分析,很容易分析出,这是把变量a的值从0位开始,<br>
到倒数第三位之间的值全部赋予给var</p>
<p>如果改成这样</p>
<p>截取功能例子5：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~2,-3%
echo %var%
pause

</code></pre>
<p>运行显示：s.verybat<br>
那么他就是显示从第3位（偏移量2）开始减去倒数三位字符的值,并赋予给变量var<br>
讲得好，例子就是说明问题，为便于记忆，小节如下：</p>
<pre><code>a=bbs.verybat.cn
%a:~1,2%   ＝“bs”   偏移量1，从第二位开始向右取2位
%a:~-3%    ＝“.cn”  偏移量负3，即倒数3位（也可理解为留下右边3位），右取全部
%a:~3%     ＝“.verybat.cn” 偏移量3（也可理解为去掉左边3位），右取全部
%a:~0,-3%   ＝“bbs.verybat” 偏移量0，右取长度至负3，即倒数3位
%a:~2,-3%   ＝“s.verybat”  偏移量2，右取长度至负3，即倒数3位

</code></pre>
<hr>
<p>所以，截取功能统一语法格式为：%a:~[m[,n]]%</p>
<hr>
<p>方括号表示可选，%a%为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n</p>
<p>为截取长度（缺省为全部）<br>
上面所述用法其实相当于vbs函数mid、left、right</p>
<pre><code>&gt;%a:~0,n%  相当于函数left(a,n)  取左边n位
%a:~-m%  相当于函数right（a,m） 取右边m位
%a:~m,n% 相当于函数mid(a,m+1,n) 从m+1位开始取n位
%a:~m,-n% 相当于函数mid(a,m+1,len(a)-m-n)
%a:~m %  相当于函数mid(a,m+1,len(a)-m) 或者right(a,len(a)-m)

</code></pre>
<p>思考题目：输入任意字符串，求字符串的长度<br>
参考答案：</p>
<pre><code>@echo off
set /p str=请输入任意长度的字符串:
echo 你输入了字符串:&quot;%str%&quot;
if not defined str (pause &amp; goto :eof)
set num=0
:len
set /a num+=1
set str=%str:~0,-1%
if defined str goto len
echo 字符串长度为：%num%
pause

</code></pre>
<p>好了set的一些用法,就介绍到这了。</p>
<h2 id="第六章-if命令讲解">第六章 if命令讲解</h2>
<p>最近发现有些朋友一老问IF命令的用法,IF命令个人觉得很简单,所以就一直没把发放到新手教学贴里说,现在我给补上一文,希望对各位&quot;非常<br>
BAT的&quot;新手朋友们有所帮助.</p>
<p>现在开始:</p>
<p>在CMD使用IF /?打开IF的系统帮助(自己看我就不全部列出来了),我们会发现IF有3种基本的用法!<br>
执行批处理程序中的条件处理。</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command

  NOT               指定只有条件为 false 的情况下， Windows XP 才
                    应该执行该命令。

  ERRORLEVEL number 如果最后运行的程序返回一个等于或大于
                    指定数字的退出编码，指定条件为 true。

  string1==string2  如果指定的文字字符串匹配，指定条件为 true。

  EXIST filename    如果指定的文件名存在，指定条件为 true。

  command           如果符合条件，指定要执行的命令。如果指定的
                     条件为 FALSE，命令后可跟一个执行 ELSE
                      关键字后的命令的 ELSE 命令。

ELSE 子句必须在 IF 之后出现在同一行上。例如:

    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )

</code></pre>
<p>第一种用法：<code>IF [NOT] ERRORLEVEL number command</code><br>
这个用法的基本做用是判断上一条命令执行结果的代码,以决定下一个步骤.<br>
一般上一条命令的执行结果代码只有两结果,&quot;成功&quot;用0表示  &quot;失败&quot;用1表示.</p>
<p>举个例子:</p>
<pre><code>@echo off
net user
IF %ERRORLEVEL% == 0 echo net user 执行成功了!
pause

</code></pre>
<p>这是个简单判断上条命令是否执行成功.<br>
细心的朋友可能会发现,这个用法和帮助里的用法不太一样,按照帮助里的写法&quot;IF %ERRORLEVEL% == 0 echo net user 执行成功了!&quot;这一句</p>
<p>代码应该写成:IF ERRORLEVEL 0 echo net user 执行成功了!<br>
那为什么我要写成这样呢?各位自己把代码改掉执行后,就会发现错误了!用这种语法,不管你的上面的命令是否执行成功,他都会认为命令成功了<br>
,不知道是BUG还是本人理解错误...</p>
<p>补充：这不是bug，而是 if errorlevel 语句的特点：当使用 if errorlevel 0 …… 的句式时，它的含义是：如果错误码的值大于或等于0的时候，将执行某个操作；当使用 if %errorlevel%==0 …… 的句式时，它的含义是：如果错误码的值等于0的时候，将执行某操作。因为这两种句式含义的差别，如果使用前一种句式的时候，错误码语句的排列顺序是从大到小排列%ERRORLEVEL% 这是个系统变量,返回上条命令的执行结果代码! &quot;成功&quot;用0表示  &quot;失败&quot;用1表示. 当然还有其他参数,用的时候基本就这两数字.</p>
<p>一般上一条命令的执行结果代码只有两结果,&quot;成功&quot;用0表示  &quot;失败&quot;用1表示<br>
　　这只是一般的情况，实际上，errorlevel返回值可以在0~255之间，比如，xcopy默认的errorlevel值就有5个，分别表示5种执行状态：</p>
<p>退出码 说明<br>
0 文件复制没有错误。<br>
1 if errorlevel 2 echo。<br>
2 用户按 CTRL+C 终止了 xcopy。<br>
4 出现了初始化错误。没有足够的内存或磁盘空间，或命令行上输入了无效的驱动器名称或语法。<br>
5 出现了磁盘写入错误。</p>
<p>要判断上面xcopy命令的5种退出情况，应写成：</p>
<pre><code>if errorlevel 5 echo出现了磁盘写入错误
if errorlevel 4 echo出现了初始化错误
if errorlevel 2 echo用户按 CTRL+C 终止了 xcopy
if errorlevel 1 echo if errorlevel 2 echo
if errorlevel 0 echo文件复制没有错误。
才能正确执行。

</code></pre>
<p>补充完毕。<br>
再举几个例子给新手理解</p>
<pre><code>@echo off
net usertest
IF %ERRORLEVEL% == 1 echo net user 执行失败了!
pause

</code></pre>
<p>这个是判断上一条命令是否执行失败的</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0 goto yes
goto no
:yes
echo !var! 执行成功了
pause
exit
:no
echo 基本上执行失败了..
pause

</code></pre>
<p>这个是根据你输入的命令,自动判断是成功还是失败了!<br>
在来一个简化版的</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0 (echo %var%执行成功了) ELSE echo %var%执行失败了!
pause

</code></pre>
<p>else后面写上执行失败后的操作!<br>
当然我门还可以把if else这样的语句分成几行写出来,使他看上去好看点...</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0  (
   echo !var! 执行成功了
   ) ELSE (
   echo 基本上执行失败了..
   )
pause

</code></pre>
<p>这里介绍的两种简写对IF的三种语法都可以套用,不单单是在IF [NOT] ERRORLEVEL number command<br>
这种法上才能用<br>
<code>第二种用法：IF [NOT] string1 == string2 command</code><br>
这个呢就是用来比较变量或者字符的值是不是相等的.</p>
<p>例子</p>
<pre><code>@echo off
set /p var=请输入第一个比较字符:
set /p var2=请输入第二个比较字符:
if %var% == %var2% (echo 我们相等) ELSE echo 我们不相等
pause

</code></pre>
<p>上面这个例子可以判断你输入的值是不是相等,但是你如果输入相同的字符,但是如果其中一个后面打了一个空格,<br>
这个例子还是会认为相等,如何让有空格的输入不相等呢?我们在比较字符上加个双引号就可以了.</p>
<pre><code>@echo off
set /p var=请输入第一个比较字符:
set /p var2=请输入第二个比较字符(多输入个空格试试):
if &quot;%var%&quot; == &quot;%var2%&quot; (echo 我们相等) ELSE echo 我们不相等
pause

</code></pre>
<p><code>第三种用法：IF [NOT] EXIST filename command</code><br>
这个就是判断某个文件或者文件夹是否存在的语法<br>
例子</p>
<pre><code>@echo off
if exist &quot;c:\test&quot; (echo 存在文件) ELSE echo 不存在文件
pause

</code></pre>
<p>判断的文件路径加引号是为了防止路径有空格,如果路径有空格加个双引号就不会出现判断出错了!<br>
这个语法没什么太多的用法,基本就这样了,就不多介绍了.<br>
另外我们看到每条IF用法后都有个[NOT]语句,这啥意思?其他加上他的话,就表示先判断我们的条件不成立时,<br>
没加他默认是先判断条件成立时,比如上面这个例子</p>
<pre><code>@echo off
if not exist &quot;c:\test&quot; (echo 存在文件) ELSE echo 不存在文件
pause

</code></pre>
<p>加个NOT,执行后有什么结果,如果你的C盘下根本就没c:\test,他还是会显示&quot;存在文件&quot;,这就表示了加了NOT就<br>
会先判断条件失败!懂了吧,上面例子改成这样就正确了!</p>
<pre><code>@echo off
if not exist &quot;c:\test&quot; (echo 不存在文件) ELSE echo 存在文件
pause

</code></pre>
<p><code>第四种用法：IF增强的用法</code><br>
IF [/I] string1 compare-op string2 command<br>
IF CMDEXTVERSION number command<br>
IF DEFINED variable command</p>
<p>后面两个用法,我不做介绍,因为他们和上面的用法表示的意义基本一样,只简单说说  IF [/I] string1 compare-op string2 command这个语句<br>
在判断字符时不区分字符的大小写。</p>
<p>CMDEXTVERSION 条件的作用跟 ERRORLEVEL 的一样，除了它<br>
是在跟与命令扩展名有关联的内部版本号比较。第一个版本<br>
是 1。每次对命令扩展名有相当大的增强时，版本号会增加一个。<br>
命令扩展名被停用时，CMDEXTVERSION 条件不是真的。</p>
<p>如果已定义环境变量，DEFINED 条件的作用跟 EXISTS 的一样，<br>
除了它取得一个环境变量，返回的结果是 true。</p>
<pre><code>@echo off
if a == A (echo 我们相等) ELSE echo 我们不相等
pause

</code></pre>
<p>执行后会显示：我们不相等</p>
<pre><code>@echo off
if /i a == A (echo 我们相等) ELSE echo 我们不相等
pause

</code></pre>
<p>加上/I不区分大小写就相等了!<br>
最后面还有一些用来判断数字的符号</p>
<pre><code>    EQU - 等于
    NEQ - 不等于
    LSS - 小于
    LEQ - 小于或等于
    GTR - 大于
    GEQ - 大于或等于

</code></pre>
<p>我就举一个例子,大家都懂数学...不讲多了</p>
<pre><code>@echo off
set /p var=请输入一个数字:
if %var% LEQ  4 (echo 我小于等于4) ELSE echo 我不小于等于4
pause

</code></pre>
<h2 id="第七章-dos编程高级技巧">第七章 DOS编程高级技巧</h2>
<h3 id="一-交互界面设计">一、交互界面设计</h3>
<p>没啥说的，看看高手设计的菜单界面吧：</p>
<pre><code>@echo off
cls
title 终极多功能修复
:menu
cls
color 0A
echo.
echo                 ==============================
echo                 请选择要进行的操作，然后按回车
echo                 ==============================
echo.
echo              1.网络修复及上网相关设置,修复IE,自定义屏蔽网站
echo.
echo              2.病毒专杀工具，端口关闭工具,关闭自动播放
echo.
echo              3.清除所有多余的自启动项目，修复系统错误
echo.
echo              4.清理系统垃圾,提高启动速度
echo.
echo              Q.退出
echo.
echo.
:cho
set choice=
set /p choice=          请选择:
IF NOT &quot;%choice%&quot;==&quot;&quot; SET choice=%choice:~0,1%
if /i &quot;%choice%&quot;==&quot;1&quot; goto ip
if /i &quot;%choice%&quot;==&quot;2&quot; goto setsave
if /i &quot;%choice%&quot;==&quot;3&quot; goto kaiji
if /i &quot;%choice%&quot;==&quot;4&quot; goto clean
if /i &quot;%choice%&quot;==&quot;Q&quot; goto endd
echo 选择无效，请重新输入
echo.
goto cho

</code></pre>
<p>只要学完本教程前面的章节，上面的程序应该能看懂了。</p>
<h3 id="二-ifelse条件语句">二、if…else…条件语句</h3>
<p>前面已经谈到，DOS条件语句主要有以下形式</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
增强用法：IF [/I] string1 compare-op string2 command
增强用法中加上/I就不区分大小写了!
增强用法中还有一些用来判断数字的符号：

</code></pre>
<p>EQU - 等于<br>
NEQ - 不等于<br>
LSS - 小于<br>
LEQ - 小于或等于<br>
GTR - 大于<br>
GEQ - 大于或等于</p>
<p>上面的command命令都可以用小括号来使用多条命令的组合，包括else子句，组合命令中可以嵌套使用条件或循环命令。</p>
<p>例如:</p>
<pre><code>    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )

</code></pre>
<p>也可写成：<br>
<code>if exist filename (del filename) else (echo filename missing)</code><br>
但这种写法不适合命令太多或嵌套命令的使用。</p>
<h3 id="三-循环语句">三、循环语句</h3>
<p>1、指定次数循环<br>
FOR /L %variable IN (start,step,end) DO command [command-parameters]</p>
<p>组合命令：<br>
FOR /L %variable IN (start,step,end) DO (<br>
Command1<br>
Command2<br>
……<br>
)</p>
<p>2、对某集合执行循环语句。<br>
<code>FOR %%variable IN (set) DO command [command-parameters]</code></p>
<p>%%variable  指定一个单一字母可替换的参数。<br>
(set)      指定一个或一组文件。可以使用通配符。<br>
command   对每个文件执行的命令，可用小括号使用多条命令组合。</p>
<pre><code>FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]

    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前
目录。如果集仅为一个单点(.)字符，则枚举该目录树。

</code></pre>
<p>同前面一样，command可以用括号来组合：</p>
<pre><code>FOR /R [[drive:]path] %variable IN (set) DO (
Command1
Command2
……
commandn
)

</code></pre>
<p>3、条件循环<br>
利用goto语句和条件判断，dos可以实现条件循环，很简单啦，看例子：</p>
<pre><code>@echo off
set var=0
rem ************循环开始了
:continue
set /a var+=1
echo 第%var%此循环
if %var% lss 100 goto continue
rem ************循环结束了
echo 循环执行完毕
pause

</code></pre>
<h3 id="四-子程序">四、子程序</h3>
<p>在批处理程序中可以调用外部可运行程序，比如exe程序，也可调用其他批处理程序，这些也可以看作子程序，但是不够方便，如果被调用的程序很多，就显得不够简明了，很繁琐。<br>
在windowsXP中，批处理可以调用本程序中的一个程序段，相当于子程序，这些子程序一般放在主程序后面。</p>
<p>子程序调用格式：<br>
<code>CALL :label arguments</code></p>
<p>子程序语法：</p>
<pre><code>:label
command1
command2


commandn
goto :eof

</code></pre>
<p>传至子程序的参数在call语句中指定，在子程序中用%1、%2至%9的形式调用，而子程序返回主程序的数据只需在调用结束后直接引用就可以了，当然也可以指定返回变量，请看下面的例子。<br>
子程序例1：</p>
<pre><code>@echo off
call :sub return 你好
echo 子程序返回值：%return%
pause

:sub
set %1=%2
goto :eof

</code></pre>
<p>运行结果：你好<br>
子程序例2：设计一个求多个整数相加的子程序</p>
<pre><code>@echo off
set sum=0
call :sub sum 10 20 35
echo 数据求和结果：%sum%
pause

:sub
rem 参数1为返回变量名称
set /a %1=%1+%2
shift /2
if not &quot;%2&quot;==&quot;&quot; goto sub
goto :eof

</code></pre>
<p>运行结果：65<br>
在win98系统中，不支持上面这种标号调用，须将子程序单独保存为一个批处理程序，然后调用。</p>
<h3 id="五-用ftp命令实现自动下载">五、用ftp命令实现自动下载</h3>
<p>ftp是常用的下载工具，ftp界面中有40多个常用命令，自己学习了，不介绍了。这里介绍如何用dos命令行调用ftp命令，实现ftp自动登录，并上传下载，并自动退出ftp程序。<br>
其实可以将ftp命令组合保存为一个文本文件，然后用以下命令调用即可。</p>
<p><code>ftp -n -s:[[drive:]path]filename</code></p>
<p>上面的filename为ftp命令文件，包括登录IP地址，用户名、密码、操作命令等<br>
例：</p>
<pre><code>open 90.52.8.3   ＃打开ip
user iware       ＃用户为iware
password8848    ＃密码
bin             ＃二进制传输模式
prompt
cd tmp1         ＃切换至iware用户下的tmp1目录
pwd
lcd d:\download   ＃本地目录
mget *          ＃下载tmp1目录下的所有文件
bye             ＃退出ftp

</code></pre>
<h3 id="六-用7-zip实现命令行压缩和解压功能">六、用7-ZIP实现命令行压缩和解压功能</h3>
<p>语法格式：（详细情况见7-zip帮助文件，看得头晕可以跳过，用到再学）</p>
<pre><code>7z &lt;command&gt; [&lt;switch&gt;...] &lt;base_archive_name&gt; [&lt;arguments&gt;...]  
7z.exe的每个命令都有不同的参数&lt;switch&gt;,请看帮助文件  
&lt;base_archive_name&gt;为压缩包名称  
&lt;arguments&gt;为文件名称，支持通配符或文件列表  
其中，7z是至命令行压缩解压程序7z.exe，&lt;command&gt;是7z.exe包含的命令，列举如下：  

</code></pre>
<pre><code>a： Adds files to archive. 添加至压缩包
a命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -sfx (create SFX)
  -si (use StdIn)
  -so (use StdOut)
  -ssw (Compress shared files)
  -t (Type of archive)
  -u (Update)
  -v (Volumes)
  -w (Working Dir)
  -x (Exclude)

</code></pre>
<p>b： Benchmark</p>
<pre><code>d： Deletes files from archive. 从压缩包中删除文件
d命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -u (Update)
  -w (Working Dir)
  -x (Exclude)

</code></pre>
<pre><code>e： Extract解压文件至当前目录或指定目录
e命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)

</code></pre>
<p>l： Lists contents of archive.<br>
t： Test<br>
u： Update</p>
<pre><code>x： eXtract with full paths用文件的完整路径解压至当前目录或指定目录
x命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)

</code></pre>
<h3 id="七-调用vbscript程序">七、调用VBScript程序</h3>
<p>使用 Windows 脚本宿主，可以在命令提示符下运行脚本。CScript.exe 提供了用于设置脚本属性的命令行开关。<br>
用法：CScript 脚本名称 [脚本选项...] [脚本参数...]<br>
选项：</p>
<pre><code>//B         批模式：不显示脚本错误及提示信息
//D         启用 Active Debugging
//E:engine  使用执行脚本的引擎
//H:CScript 将默认的脚本宿主改为 CScript.exe
//H:WScript 将默认的脚本宿主改为 WScript.exe （默认）
//I         交互模式（默认，与 //B 相对)
//Job:xxxx  执行一个 WSF 工作
//Logo      显示徽标（默认）
//Nologo    不显示徽标：执行时不显示标志
//S         为该用户保存当前命令行选项
//T:nn      超时设定秒：允许脚本运行的最长时间
//X         在调试器中执行脚本
//U         用 Unicode 表示来自控制台的重定向 I/O

</code></pre>
<p>“脚本名称”是带有扩展名和必需的路径信息的脚本文件名称，如<code>d:\admin\vbscripts\chart.vbs。</code><br>
“脚本选项和参数”将传递给脚本。脚本参数前面有一个斜杠 (/)。每个参数都是可选的；但不能在未指定脚本名称的情况下指定脚本选项。<br>
如果未指定参数，则 CScript 将显示 CScript 语法和有效的宿主参数。</p>
<h3 id="八-将批处理转化为可执行文件">八、将批处理转化为可执行文件：</h3>
<p>由于批处理文件是一种文本文件，任何人都可以对其进行随便编辑，不小心就会把里面的命令破坏掉，所以如果将其转换成.com格式的可执行文件，不仅执行效率会大大提高，而且不会破坏原来的功能，更能将优先级提到最高。Bat2Com就可以完成这个转换工作。</p>
<p>小知识：在DOS环境下，可执行文件的优先级由高到低依次为.com&gt;.exe&gt;.bat&gt;.cmd，即如果在同一目录下存在文件名相同的这四类文件，当只<br>
键入文件名时，DOS执行的是name.com，如果需要执行其他三个文件，则必须指定文件的全名，如name.bat。<br>
这是一个只有5.43K大小的免费绿色工具，可以运行在纯DOS或DOS窗口的命令行中，用法：<code>Bat2ComFileName</code>，这样就会在同一目录下生成一个名为FileNme.com的可执行文件，执行的效果和原来的.bat文件一样。</p>
<h3 id="九-时间延迟">九、时间延迟</h3>
<p>本条引用[英雄]教程<br>
什么是时间延迟？顾名思义，就是执行一条命令后延迟一段时间再进行下一条命令。<br>
1、利用ping命令延时<br>
例：</p>
<pre><code>  @echo off
  echo 延时前！
  ping /n 3 127.0.0.1 &gt;nul
  echo 延时后！
  pause

</code></pre>
<p>解说：用到了ping命令的“/n”参数，表示要发送多少次请求到指定的ip。本例中要发送3次请求到本机的ip（127.0.0.1）。127.0.0.1可简写为127.1。“&gt;nul”就是屏蔽掉ping命令所显示的内容。<br>
2、利用for命令延时<br>
例：</p>
<pre><code>  @echo off
  echo 延时前！
  for /l %%i in (1,1,5000) do echo %%i&gt;nul
  echo 延时后！
  pause

</code></pre>
<p>解说：原理很简单，就是利用一个计次循环并屏蔽它所显示的内容来达到延时的目的。</p>
<h3 id="十-模拟进度条">十、模拟进度条</h3>
<p>下面给出一个模拟进度条的程序。如果将它运用在你自己的程序中，可以使你的程序更漂亮。</p>
<pre><code>@echo off
mode con cols=113 lines=15 &amp;color 9f
cls
echo.
echo  程序正在初始化. . .
echo.
echo  ┌──────────────────────────────────────┐
set/p=  ■&lt;nul
for /L %%i in (1 1 38) do set /p a=■&lt;nul&amp;ping /n 1 127.0.0.1&gt;nul
echo   100%%
echo  └──────────────────────────────────────┘
pause

</code></pre>
<p>解说：<code>“set /p a=■&lt;nul”</code>的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping /n 0 127.1&gt;nul”是输出每个“■”的时间间隔，即每隔多少时间输出一个“■”。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Test]]></title>
        <id>https://eva793.github.io//post/test</id>
        <link href="https://eva793.github.io//post/test">
        </link>
        <updated>2019-10-07T15:23:50.000Z</updated>
        <content type="html"><![CDATA[<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Software】使用Github搭建个人博客]]></title>
        <id>https://eva793.github.io//post/2019-02-25-【Software】使用Github搭建个人博客</id>
        <link href="https://eva793.github.io//post/2019-02-25-【Software】使用Github搭建个人博客">
        </link>
        <updated>2019-02-25T13:57:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>博客模版下载地址</strong><br>
<a href="http://jekyllthemes.org/">http://jekyllthemes.org/</a><br>
<a href="https://github.com/Simpleyyt/jekyll-jacman">https://github.com/Simpleyyt/jekyll-jacman</a><br>
<a href="https://github.com/codeasashu/hcz-jekyll-blog">https://github.com/codeasashu/hcz-jekyll-blog</a></p>
<p><strong>一、创建Github仓库</strong><br>
先登陆Github账号,如下图新建一个仓库<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/tmAY1*Uz4Bv*DCDMg1UA5prkQdNhvbSqzH8eGixu4KY!/o/dDYBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qwJsAasCbAEDEDU!&amp;tl=1&amp;su=044720545&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/Gwbkp2XqrxRugyLAEdRooXO7La.eGhpfI96OgryK66I!/o/dDYBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJSAXoCUgEDEDU!&amp;tl=1&amp;su=028536049&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<code>Repository name就是你的仓库名,这个仓库名必须按(帐户名.github.io)格式来写,到时候访问的地址就是这个了,至于下面的Initialize this repository with a README( 使用 README.md 初始化仓库这将让您可以立刻克隆该仓库到您的电脑。如果您要提交已有的仓库，请忽略这个选项)</code><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/qa0AWqGcOyEpRRovsf6vNPtYdYhTmPWtZvhdyobwfl8!/o/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXYAlYF2AIDIAU!&amp;tl=1&amp;su=021208833&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p><strong>二、将GitHub仓库克隆到本地</strong><br>
1.在自己的电脑上找一个目录来作为你本地的仓库,比如我的是”D:\GitHub”,那么就在GitHub文件夹下初始化仓库.<br>
2.初始化仓库的方式有两种,一种是用git的图形化界面来创建,另一种是用git命令来初始化,这里我使用图形化界面的方式来创建(先下载desktop github然后安装，desktop github新版不支持Windows 32位系统)<br>
desktop github下载地址<br>
<a href="https://desktop.github.com/">https://desktop.github.com/</a><br>
登入到GitHub<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/vQMvgZ7pfIjDE.MzZsaGcfewu3JSXJO11eJF.nyvPHE!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=vwOVAr8DlQIDMBU!&amp;tl=1&amp;su=0182371809&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
向GitHub提交统计数据可不勾<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/3eP6kBUk7CBSk6SLUf9CZycRKQBf7*5YJEzrxrbq2GI!/o/dFMBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=wgOVAsIDlQIDMBU!&amp;tl=1&amp;su=0110439745&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/HSuIxscKJqTIjyvDtQQnbndT5ui030UeV17KKEkS3TU!/o/dMIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXXAlYF1wIDEDU!&amp;tl=1&amp;su=017684945&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/rUJA*MjAXmz.RE.GTWNHsJ9HdRrej6ehuqEedjScIAU!/o/dDQBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=8gSgAvIEoAIDIAU!&amp;tl=1&amp;su=0205845697&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
克隆中等会<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/EWV5ilSfUz.*MBff6P*t6GbkoRYdM*WDjMZjJ*fRf8g!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXYAlYF2AIDEDU!&amp;tl=1&amp;su=0159959169&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
完成<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/H8bG5Ein8awOph0KkJsylp6qT8Q9XU9MqXj481JdISU!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXUAlYF1AIDEDU!&amp;tl=1&amp;su=0230474961&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<strong>三、将网页传到GitHub上</strong><br>
1.在本地的路径下放入文件<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/CyAjfqukp1304o7bIVzBC.rOYddUrXSzAdM23JaVf2U!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2gJcAtoCXAIDEDU!&amp;tl=1&amp;su=0263285937&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
提交备注（给提交的文件添加个摘要信息）<br>
furst push<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/pvI3WikkaVH1QgeLzXMEPNVwyCZOTfNe2xhHQyXiqog!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXYAlYF2AIDEDU!&amp;tl=1&amp;su=0129619153&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
2.然后回到网页这刷新下就可以了<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/it7SSmFD0VZwvyDJFYtilXimfk*HRs8d50*T.d*sONM!/o/dDQBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXUAlYF1AIDEDU!&amp;tl=1&amp;su=0214101793&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<strong>四、浏览自己的网页</strong><br>
访问自己上传的网页(点自己的仓库-设置  往下拉)<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/2dAtNdcTecMw7gPAjjeNzkxdCQcoWN3UMUZhe9HrjWg!/o/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=8QOjAPEDowADEDU!&amp;tl=1&amp;su=0232018353&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
然后就可以通过GitHub提供的这个网址访问自己的博客了<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/VJ0fICRzY43ZK591.anx8zfW3sMyNS7VLH0C4VtomAY!/o/dFQBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=wAL7AMAC.wADEDU!&amp;tl=1&amp;su=0268041425&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/.DCDzaYjz8f17vCeRiWeAHcC33QOwk4l1K4fGbrk5ak!/o/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=VgXaAlYF2gIDEDU!&amp;tl=1&amp;su=0166572849&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p><strong>【需要使用Markdown编辑器写博客】</strong><br>
第一步:去JekyllThemes下载一个自己喜欢的模板<br>
第二步:按照之前的步骤把下载好的模板上传到自己的Github仓库中<br>
第三步:在_posts文件夹中放入自己写好的博客,文件名必须是日期-标题名,例如:2019-01-01-我的第一篇博客<br>
第四步:上传博客到Github中即可访问自己的博客<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/dV0FGUcNRaFWFKAAsldsvxZ7wFjL93nalP5vWHUWa6c!/o/dLkAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=2wO1AdsDtQEDEDU!&amp;tl=1&amp;su=0119672833&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Software】GitHub 汉化插件安装]]></title>
        <id>https://eva793.github.io//post/2019-02-24-【Software】GitHub 汉化插件安装</id>
        <link href="https://eva793.github.io//post/2019-02-24-【Software】GitHub 汉化插件安装">
        </link>
        <updated>2019-02-24T13:49:00.000Z</updated>
        <content type="html"><![CDATA[<p>1.下载 Tampermonkey_v4.2.7.crx 插件<br>
<a href="http://www.52cik.com/github-hans/Tampermonkey_v4.2.7.crx">http://www.52cik.com/github-hans/Tampermonkey_v4.2.7.crx</a><br>
2.在 chrome 里打开 chrome://extensions/ 这里地址(浏览器需登录，页面打开开发者模式开关)<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/CfMnXR9K2C50JAZqD09KAae3nG5YRvqEDCrR9wTdsM8!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgInAQAAAAADEDs!&amp;tl=1&amp;su=0250883697&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
3.把刚才下载到的 Tampermonkey_v4.2.7.crx 拖进去就好了<br>
4.接着点浏览器右上角的插件图标，选择 “添加新脚本...”<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/JKTEOEi*paGKt2g00iOaGJLD.yvimSG.VqB8..Hvg.M!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgInAQAAAAADEDs!&amp;tl=1&amp;su=010322961&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
5.然后将 <a href="https://github.com/52cik/github-hans/blob/gh-pages/main.js">https://github.com/52cik/github-hans/blob/gh-pages/main.js</a>源码全选复制进去覆盖掉保存刷新下网页完成(源码有两处错误)<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/gaxqdnlqhbp0G.B7L.8DkWdhGUWvVadrkdaNIBUoKwY!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgIoAQAAAAADEDQ!&amp;tl=1&amp;su=0162232145&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
在箭头e的后面添加上;（英文状态下输入）<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/Y5.rb24m.1irT.yimy5B1q4XJKlqqDgvvfpZt3H5IQo!/b/dLYAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgInAQAAAAADEDs!&amp;tl=1&amp;su=0153017089&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://a1.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/b5nUsMPPmw1UTxO*ZV7WMRLzeqboPOHDLzOoNZ62JDY!/b/dLgAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgInAQAAAAADEDs!&amp;tl=1&amp;su=0168626897&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
还没谷歌自带的翻译好用。。。(在网页右键有个翻译网页选项)<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/T*fcWwq.wlIBm27dNR1i1UzfgKj0IKxn0twVC2r*d90!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgInAQAAAAADEDs!&amp;tl=1&amp;su=0254988353&amp;tm=1553403600&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p><strong>谷歌插件</strong><br>
1.新标签页 Infinity插件<br>
功能介绍链接 <a href="https://cn.infinitynewtab.com/">https://cn.infinitynewtab.com/</a></p>
<p>2.恢复关闭标签插件（可以快速回到刚刚不小心关掉的网页）<br>
<a href="https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj">https://chrome.google.com/webstore/detail/simpleundoclose/emhohdghchmjepmigjojkehidlielknj</a></p>
<p>3.油猴插件 Tampermonkey<br>
谷歌浏览器用户脚本管理插件<br>
可以通过安装脚本实现破解vip视频、百度网盘资源直接下载等实用功能，堪称神器。<br>
功能介绍链接 <a href="http://dwz.cn/5sxn9wxZ">http://dwz.cn/5sxn9wxZ</a></p>
<p>4.图片助手(ImageAssistant)插件<br>
网页图片提取、图片筛选<br>
功能介绍链接 <a href="http://dwz.cn/FSsOjS6R">http://dwz.cn/FSsOjS6R</a></p>
<p>5.Clear-Cache<br>
一键清除浏览器缓存<br>
开发和测试必备插件<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237429862">https://u14797164.pipipan.com/fs/14797164-237429862</a></p>
<p>6.网站技术分析WhatRuns插件<br>
能分析当前网页设计架构<br>
功能介绍链接 <a href="http://dwz.cn/VvJTo1sT">http://dwz.cn/VvJTo1sT</a><br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237421488">https://u14797164.pipipan.com/fs/14797164-237421488</a></p>
<p>7.购物比价插件<br>
全网自动比价工具，各大电商网站比价、180天价格历史跟踪、降价提醒<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237427693">https://u14797164.pipipan.com/fs/14797164-237427693</a></p>
<p>8.下载+<br>
Chrome的下载管理在二级菜单里，进去很不方便。装了这个插件就可以直接看和管理，很好用。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237427303">https://u14797164.pipipan.com/fs/14797164-237427303</a></p>
<p>9.跨平台复制粘贴Markdown-Here插件<br>
超好用的一款插件，强烈推荐！！有个它再也不用担心编辑器不支持markdown语法了，写好以后直接一键转换。而且也是一个跨平台神器，比如我们可以把简书写好的文章（带md语法）直接复制到微信公众号，然后一键转换，格式几乎无变化！<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237430000">https://u14797164.pipipan.com/fs/14797164-237430000</a></p>
<p>10.多个窗口合成一个窗口OneTab插件<br>
这个插件很实用<br>
有的时候打开一堆网页但是又不想关，看着很闹心<br>
可以把这些网页合到一个里面<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237428194">https://u14797164.pipipan.com/fs/14797164-237428194</a></p>
<p>11.识别字体WhatFont插件<br>
鼠标放到网页上面的某个字上就可以知道是什么字体</p>
<p>12.吸取网页颜色插件<br>
ColorZilla、ColorPick Eyedropper两款插件<br>
鼠标放到对应地方就识别该颜色，这个很适合前端开发人员</p>
<p>13.Adblock Plus：免除广告困扰<br>
只要是使用 Chrome 的人都应该安装的一款扩展应用，可以帮助你屏蔽几乎大部分网页广告，如果存在漏网之鱼，还可以手动添加到屏蔽列。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237412331">https://u14797164.pipipan.com/fs/14797164-237412331</a></p>
<p>14.关灯看视频<br>
有时候网速太差，全屏以后分辨率很低，可以试试这个，可以让周围页面变暗从而达到最好的视觉效果。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237427954">https://u14797164.pipipan.com/fs/14797164-237427954</a></p>
<p>15.二维码(QR码)生成器<br>
在线的二维码生成器。可以把当前的网页直接生成二维码，进行编辑。还可以把文字生成二维码，这个很重要！<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237430273">https://u14797164.pipipan.com/fs/14797164-237430273</a></p>
<p>16.一键管理所有扩展<br>
Chrome其实很占内存，尤其当插件装多了以后会卡顿。不过有个这个就不用担心，用不到的时候把插件关掉就行了，随时开随时关。<br>
离线版下载地址：<a href="https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%A9%E5%B1%95/lboblnfejcmcaplhnbkkfcienhlhpnni/related?utm_source=www.crx4chrome.com">https://chrome.google.com/webstore/detail/一键管理扩展/lboblnfejcmcaplhnbkkfcienhlhpnni/related?utm_source=www.crx4chrome.com</a></p>
<p>17.Imagus<br>
图片放大镜的功能！在体验了360浏览器、猎豹浏览器之后，特地去找的扩展！微博党的利器！这个不管能鼠标悬停放大图片，同时，对链接等也有预览。提供很多功能选项进行设置。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237429468">https://u14797164.pipipan.com/fs/14797164-237429468</a></p>
<p>18.眼不见心不烦（新浪微博）<br>
Chrome就是满分评价，可见这扩展真是良心扩展啊！微博党的福音！在浏览器端，自己通过这个插件进行设置，可以将热门微博、会员推广等等内容窗口都给屏蔽了！还我们一个干净、舒服的微博环境！推荐！！！<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237428838">https://u14797164.pipipan.com/fs/14797164-237428838</a></p>
<p>19.Lucidchart Diagrams - Desktop：在线绘制多种图表<br>
这个扩展程序是一款多功能绘制程序，支持绘制流程图，思维导图，版面设计等，并且有在线和离线两种模式，可谓功能强大。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-238588636">https://u14797164.pipipan.com/fs/14797164-238588636</a></p>
<p>20.Search by Image：强大的以图搜图<br>
Chrome 又一神器，结合 Google 以图搜图，可以快速让你找到一张图片的来源、其他尺寸、或者寻找到相似的图片，毕竟在搜索方面，还是 Google 做的最好。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-238590409">https://u14797164.pipipan.com/fs/14797164-238590409</a></p>
<p>21.Postman<br>
相信开发者朋友一定知道这款插件，这是一款强大的 API &amp; HTTP 请求调试工具，它不仅可以调试简单的 HTML、CSS 以及脚本等简单的网页基本信息，这款 Chrome 插件甚至还能发送几乎所有的 HTTP 请求，可谓是 Web 开发者的一大利器。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237420917">https://u14797164.pipipan.com/fs/14797164-237420917</a></p>
<p>22.Code Cola<br>
Code Cola是一个可视化编辑在线页面css样式的chrome插件。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237430108">https://u14797164.pipipan.com/fs/14797164-237430108</a></p>
<p>23.WEB前端助手<br>
FE助手：包括字符串编解码、图片base64编码、代码压缩、美化、JSON格式化、正则表达式、时间转换工具、二维码生成器、编码规范检测、页面性能检测、栅格检测、JS运行效率分析等。<br>
离线版下载地址：<a href="https://u14797164.pipipan.com/fs/14797164-237430197">https://u14797164.pipipan.com/fs/14797164-237430197</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【System】Windows7局域网共享打印机设置]]></title>
        <id>https://eva793.github.io//post/2019-01-19-【System】Windows7局域网共享打印机设置</id>
        <link href="https://eva793.github.io//post/2019-01-19-【System】Windows7局域网共享打印机设置">
        </link>
        <updated>2019-01-19T11:48:00.000Z</updated>
        <content type="html"><![CDATA[<p>Windows7局域网共享打印机设置分两步：<br>
（不同运营商和不同网段可以利用无线路由器组成局域网进行打印机共享）</p>
<p>①目标打印机设置（关闭密码保护共享和启动Guest用户、共享打印机选项设置）<br>
②在其它计算机上添加目标打印机<br>
<strong><code>注意事项：</code></strong><br>
<strong><code>1.路由器或光钎猫接口</code></strong><br>
<strong><code>2.网络状态是否相同</code></strong><br>
<strong><code>3.防火墙</code></strong><br>
<strong><code>4.关于共享之类的设置是否恰当</code></strong></p>
<p><strong>一、关闭密码保护共享和启用Guest用户</strong><br>
1、开启“网络和共享中心”，选中“更改高级共享设置”。<br>
2、在“启用网络发现”和“启用文件和打印机共享”前勾选，再保存。<br>
3、在“密码保护的共享”-“关闭密码保护共享”。<br>
4、右击“计算机图标”——选择“管理”<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/qrhdY.z*frSfFcuZrjiIDj6QRT0OmLzM5dgCvCQT*Ok!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgIzAQAAAAADEC8!&amp;tl=1&amp;su=0132571249&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>5、在“本地用户和组”中找到“用户”，再找到“Guset”<br>
<img src="http://a2.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/VLuy0cxylxbqriNzVZSeDvhCzIUo2payFKxMO53yTeI!/b/dDEBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gQJJAQAAAAADEP4!&amp;tl=1&amp;su=0237801057&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>6、右击“Guest”——选择属性——把“账户已禁用”前的勾去掉，点击确定<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/lLYHzgeyEZ6lrgIcthh1vq.hlHh2F.XawGKK*wdTBFU!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgLlAQAAAAADEPk!&amp;tl=1&amp;su=0259013153&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p><strong>目标打印机共享设置（如果同时需要给32、64为系统做共享打印机，两个版本驱动都需要安装）</strong><br>
7、“开始”—选择“设备和打印机”<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/YjD00Fy.mnyOzarXeco2PEgA6uNv.afiJi4ZMAeMWU0!/b/dFMBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=mAEAAgAAAAADEK4!&amp;tl=1&amp;su=0148658705&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>8、选中目标打印机（前提是打印机已正确安装），单击鼠标右键打开菜单，选择“打印机属性”<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/y8ZQgzXNFqCZIV5pGSAc7TyrwLVcgsqngLjHg7WRJqU!/b/dDcBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgLhAQAAAAADIM0!&amp;tl=1&amp;su=090298161&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>9、 选择“共享”选项卡，选中“共享这台打印机”并设置共享名，然后确定。<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/QJPuEfgfHgYDUNoMbpSxSK6fubcZtlA7sdfBTrdUdMM!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgLdAQAAAAADEME!&amp;tl=1&amp;su=0190120097&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p><strong>二、在其它计算机添加目标打印机</strong></p>
<p>1、 打开“资源管理器”，在地址栏输入<code>\</code>共享打印机的IP地址， 例如：<code>\\192.168.1.4</code><br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/uQX508UBl1Arns.LvOk05qIFReBZsKsh8Le9P0WH.gw!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgIdAQAAAAADEAE!&amp;tl=1&amp;su=0122010721&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>注：有些 XP 系统可能一些策略没有打开，会出现不能正常访问的情况，可试着做如下的处理：<br>
1） 在组策略中设置，安全策略。开始--运行--gpedit.msc--计算机配置--windows 设置--安全设置--本地策略--“用户权力指派”，双击右边的“从网络访问此计算机”，保证其中有 Everyone， 再双击左边的“拒绝从网络访问此计算机”，保证其是空的。<br>
2）选择左边的“本地策略”-“安全选项”<br>
a.确认右边的“网络访问：本地帐户的共享与安全模式”为“经典”；<br>
b.确认右边的“ Microsoft 网络客户：为通讯启用数字签名（总是）”为“已停用”；<br>
c.确认右边的“ Microsoft 网络客户：为通讯启用数字签名（如果服务器允许）”为“已启用”；<br>
d.确认右边的“ Microsoft 网络服务器：为通讯启用数字签名（总是）”为“已停用”；<br>
e.确认右边的“ Microsoft 网络服务器：为通讯启用数字签名（如果服务器允许）”为“已启用”。</p>
<p>2、 选中共享打印机， 单击鼠标右键打开快显菜单，选择“连接”， 进行安装。<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/ayJ4fOKYcjYwlh1YVUqSrAWyLLzPswXgmld00CDNGcM!/b/dL4AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgJwAQAAAAADEGw!&amp;tl=1&amp;su=058591153&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
<p>3、“控制面板”-“硬件和声音”-“设备和打印机”，选择刚装好的打印机， 单击鼠标右键，选择“打印机属性”，单击“打印测试页”， 正常打印， 说明安装成功。<br>
<img src="http://a1.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/J3nyNT1V6qjpGNTlefQDWjAQaFpjPRNMGZcQ9QCcu2g!/b/dFQBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=JAISAgAAAAADEAM!&amp;tl=1&amp;su=078400817&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/*zyOXddAGWu6.3kjM2QLw3df1AMjHaim5VT*nACptO4!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=KgLaAQAAAAADEMY!&amp;tl=1&amp;su=091155473&amp;tm=1553306400&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【System】Win7设置局域网共享]]></title>
        <id>https://eva793.github.io//post/2019-01-19-【System】Win7设置局域网共享</id>
        <link href="https://eva793.github.io//post/2019-01-19-【System】Win7设置局域网共享">
        </link>
        <updated>2019-01-19T11:46:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Win7如何设置局域网共享一：</strong><br>
1、开启“网络和共享中心”，选中“更改高级共享设置”。<br>
2、在“启用网络发现”和“启用文件和打印机共享”前勾选，再保存。<br>
3、打开“计算机”右键菜单，选中“管理”。<br>
<img src="http://a1.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/9tUV67Z4g5HoDk*l7VsdzGtrZkDkJ11nKFDj3jbBpGw!/b/dMAAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=FgJHAgAAAAADIFQ!&amp;tl=1&amp;su=0248031665&amp;tm=1553338800&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
4、在管理中，按顺序点击：本地用户和组—用户—Guest ，双击Guest 。<br>
5、在Guest中，将“账户已禁用”前面或后面的勾选，再确定。<br>
6、在点击开始菜单，输入 secpol.msc 按回车。<br>
7、打开“本地安装策略”之后，按顺序点击：本地策略—用户权限分配—拒绝从网络访问这台电脑，再双击“拒绝从网络访问这台电脑”。<br>
8、在“拒绝从网络访问这台电脑”中，选中“Guest ”，将它删除，再确定。<br>
9、按顺序点击：本地策略—安全选项—网络访问：本地账户的共享和安全模型，再双击“网络访问：本地账户的共享和安全模型”。<br>
10、在本地账户的共享和安全模型中，选中“仅来宾—对本地用户进行身份验证，它身份为来宾”，再退出。<br>
11、找到局域网共享的文件或文件夹，右键菜单按顺序选中：共享—特定用户。<br>
12、在下拉菜单中选中&quot;Guest&quot; ，点击“共享”。<br>
13、这样就完成啦。</p>
<p><strong>Win7如何设置局域网共享二：</strong><br>
1、无论默认的简单共享还是高级共享，右击共享的文件夹，点击属性-共享。<br>
<img src="http://a4.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/tjqC2iwUaZrjF2JwWQNB3MYfmoDdvej3JAcxSn3NRUo!/b/dL8AAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=hgGmAQAAAAADEBU!&amp;tl=1&amp;su=0249115537&amp;tm=1553338800&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
2、点击高级共享<br>
3、按如下设置：<br>
(1)勾选共享此文件夹。<br>
(2)在共享前后加上 “<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">&quot;</mi><mi mathvariant="normal">符</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">即</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">隐</mi><mi mathvariant="normal">藏</mi><mi mathvariant="normal">该</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">夹</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">其</mi><mi mathvariant="normal">他</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">看</mi><mi mathvariant="normal">不</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">该</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">夹</mi><mi mathvariant="normal">。</mi><mo>(</mo><mn>3</mn><mo>)</mo><mi mathvariant="normal">用</mi><mi mathvariant="normal">户</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">制</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">若</mi><mi mathvariant="normal">只</mi><mi mathvariant="normal">给</mi><mn>2</mn><mi mathvariant="normal">个</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">看</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">设</mi><mi mathvariant="normal">定</mi><mn>2</mn><mi mathvariant="normal">。</mi><mn>4</mn><mi mathvariant="normal">、</mi><mi mathvariant="normal">若</mi><mi mathvariant="normal">共</mi><mi mathvariant="normal">享</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">较</mi><mi mathvariant="normal">多</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">担</mi><mi mathvariant="normal">心</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">破</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">话</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">些</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">字</mi><mi mathvariant="normal">或</mi><mi mathvariant="normal">英</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">但</mi><mi mathvariant="normal">切</mi><mi mathvariant="normal">勿</mi><mi mathvariant="normal">告</mi><mi mathvariant="normal">诉</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">全</mi><mi mathvariant="normal">称</mi><mi mathvariant="normal">。</mi><mn>5</mn><mi mathvariant="normal">、</mi><mi mathvariant="normal">若</mi><mi mathvariant="normal">共</mi><mi mathvariant="normal">享</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">象</mi><mi mathvariant="normal">要</mi><mi mathvariant="normal">修</mi><mi mathvariant="normal">改</mi><mi mathvariant="normal">权</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">话</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">击</mi><mi mathvariant="normal">权</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">对</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>y</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">权</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">勾</mi><mi mathvariant="normal">选</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">然</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">确</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">返</mi><mi mathvariant="normal">回</mi><mi mathvariant="normal">。</mi><mn>6</mn><mi mathvariant="normal">、</mi><mi mathvariant="normal">再</mi><mi mathvariant="normal">将</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">夹</mi><mi mathvariant="normal">路</mi><mi mathvariant="normal">径</mi><mi mathvariant="normal">发</mi><mi mathvariant="normal">给</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">别</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">你</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">共</mi><mi mathvariant="normal">享</mi><mi mathvariant="normal">即</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">看</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">夹</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">。</mi><mn>7</mn><mi mathvariant="normal">、</mi><mi mathvariant="normal">共</mi><mi mathvariant="normal">享</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">人</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">运</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">直</mi><mi mathvariant="normal">接</mi><mi mathvariant="normal">打</mi><mi mathvariant="normal">开</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">脑</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">面</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">相</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">地</mi><mi mathvariant="normal">址</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">‘</mi><mi mathvariant="normal">”</mi><mspace linebreak="newline"></mspace><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">$</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">&quot;符号，即可隐藏该文件夹，其他人看不到该文件夹。  
(3)用户限制人数，若只给2个人看，就设定2。  
4、若共享的人数较多，担心文件被破解的话，可在文件名后面加一些数字或英文，但切勿告诉别人文件名全称。  
5、若共享对象要修改权限的话，可点击权限，对everyone的权限进行勾选，然后确定返回。  
6、再将文件夹路径发给别人，别人进入你的共享即可看到文件夹了。  
7、共享的人可在运行上直接打开我的电脑，在上面输入相应的地址，如：`”\\user\$test</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">&quot;</span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">隐</span><span class="mord cjk_fallback">藏</span><span class="mord cjk_fallback">该</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">夹</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">他</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">该</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">夹</span><span class="mord cjk_fallback">。</span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">户</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">制</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">给</span><span class="mord">2</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">定</span><span class="mord">2</span><span class="mord cjk_fallback">。</span><span class="mord">4</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">共</span><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">担</span><span class="mord cjk_fallback">心</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">破</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">话</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">些</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">字</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">英</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">但</span><span class="mord cjk_fallback">切</span><span class="mord cjk_fallback">勿</span><span class="mord cjk_fallback">告</span><span class="mord cjk_fallback">诉</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">。</span><span class="mord">5</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">若</span><span class="mord cjk_fallback">共</span><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">修</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">权</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">话</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">权</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">对</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">权</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">勾</span><span class="mord cjk_fallback">选</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">确</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">返</span><span class="mord cjk_fallback">回</span><span class="mord cjk_fallback">。</span><span class="mord">6</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">夹</span><span class="mord cjk_fallback">路</span><span class="mord cjk_fallback">径</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">给</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">你</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">共</span><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">看</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">夹</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">。</span><span class="mord">7</span><span class="mord cjk_fallback">、</span><span class="mord cjk_fallback">共</span><span class="mord cjk_fallback">享</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">人</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">直</span><span class="mord cjk_fallback">接</span><span class="mord cjk_fallback">打</span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">脑</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">面</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">地</span><span class="mord cjk_fallback">址</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">：</span><span class="mord">‘</span><span class="mord">”</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">$</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span>“<code>即可查看该文件夹。 8、为方便共享人打开文件，可增加快捷方式，右键桌面-新建-快捷方式，然后在文件夹的地址栏中输入</code>”\user$test$“`,再点击下一步-完成即可。<br>
<img src="http://a1.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/cs39UI2eqF1Safwmj5HnpIlasB14VKpKYQWpWBOWqjM!/b/dDQBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=FgJHAgAAAAADIFQ!&amp;tl=1&amp;su=0206918449&amp;tm=1553338800&amp;sce=0-12-12&amp;rf=2-9" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【编程】迁移Sublime Text 3插件和配置在其他电脑上使用]]></title>
        <id>https://eva793.github.io//post/2018-12-16-【编程】迁移Sublime Text 3插件和配置在其他电脑上使用</id>
        <link href="https://eva793.github.io//post/2018-12-16-【编程】迁移Sublime Text 3插件和配置在其他电脑上使用">
        </link>
        <updated>2018-12-16T08:11:00.000Z</updated>
        <content type="html"><![CDATA[<p>1.打开需要迁移的sublime text 3软件<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/Yuo1unTG*x9Q52ayZu0CVk6dxmI7AyxwXYFbpcyn*EY!/b/dHoBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=024867089&amp;tm=1555228800&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
2.在弹出窗口点击进入上一个目录，拷贝整个Packages文件夹以及Installed Packages文件夹。<br>
<img src="http://a1.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/fPi5Pd.8iKMa4Uk1StG8k0ISyEDnNbZCUjF5.V5SKrg!/b/dAwBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=0233288929&amp;tm=1555228800&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
3.在需要迁移的电脑上，同样安装Sublime Text 3，将拷贝的两个文件夹添加到步骤2的路径中，重启Sublime Text 3就完成了。<br>
<img src="http://a3.qpic.cn/psb?/57f6398e-db93-428d-8871-6d2527ad188f/ZJwLuk4lnez2WL*zPBv*BP8dk3Suu551bp6DYWVb3Bs!/b/dOYAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;t=5&amp;tl=3&amp;su=0182438881&amp;tm=1555228800&amp;sce=0-12-12&amp;rf=2-9" alt=""><br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/XASS54vFYF*Hi29SOL4PdhjF3IFSuRxcqG5QeCuLdRc!/o/dMMAAAAAAAAA&amp;bo=WwRDAlsEQwIDEDU!" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://eva793.github.io//post/hello-gridea</id>
        <link href="https://eva793.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【DOS】DOS命令大全02]]></title>
        <id>https://eva793.github.io//post/2013-10-09-【DOS】DOS命令大全02</id>
        <link href="https://eva793.github.io//post/2013-10-09-【DOS】DOS命令大全02">
        </link>
        <updated>2013-10-09T15:17:00.000Z</updated>
        <content type="html"><![CDATA[<p><strong>批处理高级教程精选合编</strong><br>
本教程适合对dos有一定基础的人慢慢学习或查阅。<br>
查阅方法：复制目录中的条目，搜索即可。</p>
<hr>
<h2 id="第一章-批处理基础">第一章 批处理基础</h2>
<h3 id="第一节-常用批处理内部命令简介">第一节 常用批处理内部命令简介</h3>
<p>批处理定义：顾名思义，批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为BAT或者CMD。这些命令统称批处理命令。<br>
小知识：可以在键盘上按下<code>Ctrl+C组合键来强行终止一个批处理的执行过程。</code><br>
了解了大概意思后,我们正式开始学习.先看一个简单的例子!</p>
<pre><code>@echo off
echo &quot;Hallo Word!&quot;
pause
</code></pre>
<p>把上面的3条命令保存为文件<code>test.bat</code>或者<code>test.cmd</code>然后执行,<br>
他就会在屏幕上显示以下二行话:</p>
<blockquote>
<p>Hallo Word!!<br>
请按任意键继续. . .</p>
</blockquote>
<p>这就是一个简单批处理文件了，这个批处理文件一共就用了2条命令&quot;echo&quot; 和&quot;pause&quot;还有一个特殊符号&quot;@&quot;<br>
从上面这个简单的批处理中,我们可以发现其实批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成,那么在批处理中<br>
　　有多少这样的特殊符号和功能命令呢？我们现在就来仔细了解一下一些最常用的!<br>
(以下内容来源网络,请各位仔细阅读,好进入下节的实例说明)</p>
<hr>
<p><strong>介绍命令</strong></p>
<h4 id="1-rem-和">1、REM 和 ::</h4>
<p>REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。<br>
其次, :: 也可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意：</p>
<p>第一, 任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。<br>
有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。<br>
无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，所以 :: 常被用作注释符号，其实 :+ 也可起注释作用。<br>
　　第二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中。</p>
<h4 id="2-echo-和">2、ECHO 和 @</h4>
<p>打开回显或关闭回显功能，或显示消息。如果没有任何参数，echo命令将显示当前回显设置。<br>
@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。<br>
语法:</p>
<pre><code>echo [{ on|off }] [message]
echo.   #此用法将显示一空行，相当于回车，非常有用。
</code></pre>
<p>执行<code>echo off</code>将关闭回显，它后面的所有命令都不显示命令本身，只显示执行后的结果，除非执行<code>echo on</code>命令。<br>
执行<code>@echo off</code>不但关闭以后命令的回显，连<code>echo off</code>命令本身也不显示了。<br>
通常以<code>@echo off</code>作为批处理程序的首行。<br>
一般用<code>ECHO MESSAGE</code>来显示一个特定的消息。<br>
例：</p>
<pre><code>@Echo off
Echo hello
Pause
运行显示：hello
</code></pre>
<h4 id="3-pause">3、&quot;PAUSE&quot;</h4>
<p><code>PAUSE</code>，玩游戏的人都知道，暂停的意思<br>
在这里就是停止系统命令的执行并显示下面的内容。</p>
<p>例：</p>
<pre><code>PAUSE
运行显示：
请按任意键继续. . .
</code></pre>
<p>要显示其他提示语，可以这样用：<br>
<code>Echo 其他提示语 &amp; pause &gt; nul</code></p>
<h4 id="4-errorlevel">4、errorlevel</h4>
<p>程序返回码<br>
<code>echo %errorlevel%</code><br>
每个命令运行结束，可以用这个命令行格式查看返回码<br>
用于判断刚才的命令是否执行成功<br>
默认值为0，一般命令执行出错会设 errorlevel 为1</p>
<h4 id="5-title">5、title</h4>
<p>设置cmd窗口的标题<code>title 新标题</code>#可以看到cmd窗口的标题栏变了</p>
<h4 id="6-color">6、COLOR</h4>
<p>设置默认的控制台前景和背景颜色。<br>
COLOR [attr]<br>
attr        指定控制台输出的颜色属性<br>
颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为前景。每个数字可以为以下任何值之一:</p>
<blockquote>
<p>0 = 黑色       8 = 灰色<br>
1 = 蓝色       9 = 淡蓝色<br>
2 = 绿色       A = 淡绿色<br>
3 = 湖蓝色     B = 淡浅绿色<br>
4 = 红色       C = 淡红色<br>
5 = 紫色       D = 淡紫色<br>
6 = 黄色       E = 淡黄色<br>
7 = 白色       F = 亮白色</p>
</blockquote>
<p>如果没有给定任何参数，该命令会将颜色还原到CMD.EXE启动时的颜色。这个值来自当前控制台窗口、/T 开关或DefaultColor注册表值。<br>
如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令会将 ERRORLEVEL 设置为 1。<br>
例如: &quot;COLOR fc&quot; 在亮白色上产生亮红色</p>
<h4 id="7-mode-配置系统设备">7、mode 配置系统设备</h4>
<p>配置系统设备。</p>
<pre><code>串行口:　　　　　　MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]
　　　　　　　　　　　　　　　　　　[to=on|off] [xon=on|off] [odsr=on|off]
　　　　　　　　　　　　　　　　　　[octs=on|off] [dtr=on|off|hs]
　　　　　　　　　　　　　　　　　　[rts=on|off|hs|tg] [idsr=on|off]
设备状态:　　　　　MODE [device] [/STATUS]
打印重定向:　　　　MODE LPTn[:]=COMm[:]
选定代码页:　　　　MODE CON[:] CP SELECT=yyy
代码页状态:　　　　MODE CON[:] CP [/STATUS]
显示模式:　　　　　MODE CON[:] [COLS=c] [LINES=n]
击键率:　　　　　　MODE CON[:] [RATE=r DELAY=d]
</code></pre>
<h4 id="8-goto-和">8、GOTO 和 :</h4>
<p>GOTO会点编程的朋友就会知道这是跳转的意思。<br>
在批处理中允许以<code>:XXX来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，</code>然后执行标号后的命令。<br>
例：<br>
<img src="http://r.photo.store.qq.com/psb?/57f6398e-db93-428d-8871-6d2527ad188f/IGx.G1tshRweRDB2DvRqwoHmBP9kAQADFmzgauCHY1s!/o/dL4AAAAAAAAA&amp;bo=tAA0ALQANAADEDU!" alt=""><br>
标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样别人看起来才会理解你的意图啊。</p>
<p>例：</p>
<pre><code>@echo off
:start
set /a var+=1
echo %var%
if %var% leq 3 GOTO start
pause
</code></pre>
<p>运行显示：<br>
1<br>
2<br>
3<br>
4</p>
<h4 id="9-find">9、find</h4>
<p>在文件中搜索字符串。<br>
<code>FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] &quot;string&quot; [[drive:][path]filename[ ...]]</code></p>
<pre><code>/V                         显示所有未包含指定字符串的行。
/C                         仅显示包含字符串的行数。
/N                         显示行号。
/I                         搜索字符串时忽略大小写。
/OFF[LINE]                 不要跳过具有脱机属性集的文件。
&quot;string&quot;                   指定要搜索的文字串，
[drive:][path]filename     指定要搜索的文件。
</code></pre>
<p>如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。</p>
<pre><code>Find常和type命令结合使用
Type [drive:][path]filename | find &quot;string&quot; [&gt;tmpfile] #挑选包含string的行
Type [drive:][path]filename | find /v &quot;string&quot;   #剔除文件中包含string的行
Type [drive:][path]filename | find /c   #显示文件行数
以上用法将去除find命令自带的提示语（文件名提示）
</code></pre>
<p>例：</p>
<pre><code>@echo off
echo 111 &gt;test.txt
echo 222 &gt;&gt;test.txt
find &quot;111&quot; test.txt
del test.txt
pause
</code></pre>
<p>运行显示如下：<br>
---------- TEST.TXT<br>
111<br>
请按任意键继续. . .</p>
<p>例：</p>
<pre><code>@echo off
echo 111 &gt;test.txt
echo 222 &gt;&gt;test.txt
type test.txt|find &quot;111&quot;
del test.txt
pause
</code></pre>
<p>运行显示如下：<br>
111<br>
请按任意键继续. . .</p>
<h4 id="10-start-命令">10、start 命令</h4>
<p>批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令<br>
例：<code>start explorer d:\</code><br>
调用图形界面打开D盘</p>
<h4 id="11-assoc-和-ftype">11、assoc 和 ftype</h4>
<p>文件关联</p>
<p>assoc 设置<code>文件扩展名</code>关联，关联到<code>文件类型</code><br>
ftype 设置<code>文件类型</code>关联，关联到<code>执行程序和参数</code><br>
当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开<br>
而是先判断.txt属于 txtfile <code>文件类型</code><br>
再调用 txtfile 关联的命令行<code>txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1</code><br>
可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联</p>
<pre><code>assoc               #显示所有'文件扩展名'关联
assoc .txt          #显示.txt代表的'文件类型'，结果显示 .txt=txtfile
assoc .do           #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8
assoc .exe          #显示.exe代表的'文件类型'，结果显示 .exe=exefile
ftype               #显示所有'文件类型'关联
ftype exefile       #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*
assoc .txt=Word.Document.8
</code></pre>
<p>设置.txt为word类型的文档，可以看到.txt文件的图标都变了<br>
<code>assoc .txt=txtfile</code><br>
恢复.txt的正确关联<br>
<code>ftype exefile=&quot;%1&quot; %*</code><br>
恢复 exefile 的正确关联<br>
如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p>
<h4 id="12-pushd-和-popd">12、pushd 和 popd</h4>
<p>切换当前目录</p>
<pre><code>@echo off
c: &amp; cd\ &amp; md mp3       #在 C:\ 建立 mp3 文件夹
md d:\mp4               #在 D:\ 建立 mp4 文件夹
cd /d d:\mp4            #更改当前目录为 d:\mp4
pushd c:\mp3            #保存当前目录，并切换当前目录为 c:\mp3
popd                    #恢复当前目录为刚才保存的 d:\mp4
</code></pre>
<p>一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）</p>
<h4 id="13-call">13、CALL</h4>
<p>CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理<br>
<code>CALL [drive:][path]filename [batch-parameters]</code><br>
调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。<br>
<code>CALL :label arguments</code><br>
调用本文件内命令段，相当于子程序。被调用的命令段以标签:label开头<br>
以命令goto :eof结尾。<br>
另外，批脚本文本参数参照(%0、%1、等等)已如下改变:</p>
<pre><code>     批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 ...)

     批参数(%n)的替代已被增强。您可以使用以下语法:（看不明白的直接运行后面的例子）

         %~1         - 删除引号(&quot;)，扩充 %1
         %~f1        - 将 %1 扩充到一个完全合格的路径名
         %~d1        - 仅将 %1 扩充到一个驱动器号
         %~p1        - 仅将 %1 扩充到一个路径
         %~n1        - 仅将 %1 扩充到一个文件名
         %~x1        - 仅将 %1 扩充到一个文件扩展名
         %~s1        - 扩充的路径指含有短名
         %~a1        - 将 %1 扩充到文件属性
         %~t1        - 将 %1 扩充到文件的日期/时间
         %~z1        - 将 %1 扩充到文件的大小
         %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1
                       扩充到找到的第一个完全合格的名称。如果环境
                       变量名未被定义，或者没有找到文件，此组合键会
                       扩充到空字符串

    可以组合修定符来取得多重结果:

        %~dp1       - 只将 %1 扩展到驱动器号和路径
        %~nx1       - 只将 %1 扩展到文件名和扩展名
        %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，
                       并扩展到找到的第一个文件的驱动器号和路径。
        %~ftza1     - 将 %1 扩展到类似 DIR 的输出行。

    在上面的例子中，%1 和 PATH 可以被其他有效数值替换。
</code></pre>
<p><code>%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*</code>使用<br>
注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展<br>
要理解上面的知识，下面的例子很关键。<br>
例：</p>
<pre><code>@echo off
Echo 产生一个临时文件 &gt; tmp.txt
Rem 下行先保存当前目录，再将c:\windows设为当前目录
pushd c:\windows
Call :sub tmp.txt
Rem 下行恢复前次的当前目录
Popd
Call :sub tmp.txt
pause
Del tmp.txt

:sub
Echo 删除引号： %~1
Echo 扩充到路径： %~f1
Echo 扩充到一个驱动器号： %~d1
Echo 扩充到一个路径： %~p1
Echo 扩充到一个文件名： %~n1
Echo 扩充到一个文件扩展名： %~x1
Echo 扩充的路径指含有短名： %~s1
Echo 扩充到文件属性： %~a1
Echo 扩充到文件的日期/时间： %~t1
Echo 扩充到文件的大小： %~z1
Echo 扩展到驱动器号和路径：%~dp1
Echo 扩展到文件名和扩展名：%~nx1
Echo 扩展到类似 DIR 的输出行：%~ftza1
Echo.
Goto :eof
</code></pre>
<h4 id="14-shift">14、shift</h4>
<p>更改批处理文件中可替换参数的位置。<br>
SHIFT [/n]<br>
如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉<br>
命令从第 n 个参数开始移位；n 介于零和八之间。例如:<br>
SHIFT /2<br>
会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。</p>
<h4 id="15-if">15、IF</h4>
<p>IF 条件判断语句，语法格式如下：</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
</code></pre>
<p>下面逐一介绍，更详细的分析请看后面章节。</p>
<h5 id="1-if-not-errorlevel-number-command">(1) IF [NOT] ERRORLEVEL number command</h5>
<p>IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。<br>
Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立<br>
例：</p>
<pre><code>@echo off
dir c:
rem退出代码为&gt;=1就跳至标题1处执行，&gt;=0就跳至标题0处执行
IF ERRORLEVEL 1 goto 1
IF ERRORLEVEL 0 goto 0
Rem 上面的两行不可交换位置，否则失败了也显示成功。
:0
echo 命令执行成功！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:1
echo 命令执行失败！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:exit
pause
</code></pre>
<p>运行显示：命令执行成功！</p>
<h5 id="2-if-not-string1string2-command">(2) IF [NOT] string1==string2 command</h5>
<p>string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思）<br>
条件相等后即执行后面的command<br>
检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式</p>
<pre><code>if [NOT] {string1}=={string2} command
if [NOT] [string1]==[string2] command
if [NOT] “string1”==“string2” command
</code></pre>
<p>这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：<br>
<code>if {string1}==[string2] command</code></p>
<h5 id="3-if-not-exist-filename-command">(3) IF [NOT] EXIST filename command</h5>
<p>EXIST filename为文件或目录存在的意思</p>
<pre><code>echo off
IF EXIST autoexec.bat echo 文件存在！
IF not EXIST autoexec.bat echo 文件不存在！
</code></pre>
<p>这个批处理大家可以放在C盘和D盘分别执行，看看效果</p>
<h4 id="16-setlocal-与-变量延迟">16、setlocal 与 变量延迟</h4>
<p>例1:</p>
<pre><code>@echo off
set a=4
set a=5 &amp; echo %a%
pause
</code></pre>
<p>结果：4<br>
解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？</p>
<p>让我们先了解一下批处理运行命令的机制：<br>
批处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在处理之前要完成必要的预处理工作，这其中就包括对该行命令中的变量赋值。我们现在分析一下例1，批处理在运行到这句<code>“set a=5 &amp; echo %a%”</code>之前，先把这一句整句读取并做了预处理——对变量a赋了值，那么%a%当然就是4了！（没有为什么，批处理就是这样做的。）</p>
<p>而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。</p>
<p>那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：<br>
例2:</p>
<pre><code>@echo off
setlocal enabledelayedexpansion
set a=4
set a=5 &amp; echo !a!
pause
</code></pre>
<p>结果：5<br>
解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是<code>“setlocal enabledelayedexpansion”</code>，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。</p>
<p>分析一下例2，首先<code>“setlocal enabledelayedexpansion”</code>开启变量延迟，然后<code>“set a=4”</code>先给变量a赋值为4，<code>“set a=5 &amp; echo !a!”</code>这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。</p>
<p>再举一个例子巩固一下。<br>
例3:</p>
<pre><code>@echo off
setlocal enabledelayedexpansion
for /l %%i in (1,1,5) do (
set a=%%i
echo !a!
)
pause
</code></pre>
<p>结果：<br>
1<br>
2<br>
3<br>
4<br>
5<br>
解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什么结果呢？结果是这样的：<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
ECHO 处于关闭状态。<br>
即没有感知到for语句中的动态变化。</p>
<h3 id="第二节-常用特殊符号">第二节 常用特殊符号</h3>
<h4 id="1-命令行回显屏蔽符">1、@命令行回显屏蔽符</h4>
<p>这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求</p>
<h4 id="2-批处理变量引导符">2、%批处理变量引导符</h4>
<p>这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。<br>
引用变量用%var%，调用程序外部参数用%1至%9等等</p>
<pre><code>%0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %*为命令行传递给批处理的参数
%0 批处理文件本身，包括完整的路径和扩展名
%1 第一个参数
%9 第九个参数
%* 从第一个参数开始的所有参数
</code></pre>
<p>参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。<br>
例：最简单的复制文件自身的方法<br>
<code>copy %0 d:\wind.bat</code></p>
<h4 id="3-重定向符">3、&gt;重定向符</h4>
<p>输出重定向命令<br>
这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）<br>
在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&amp;,&amp;&amp;,||和语句块的制约限制。</p>
<p>比如：<br>
使用命令：echo hello &gt;1.txt将建立文件1.txt，内容为“hello”（注意行尾有一空格）<br>
使用命令：echo hello&gt;1.txt将建立文件1.txt，内容为“hello”（注意行尾没有空格）</p>
<h4 id="4-重定向符">4、&gt;&gt;重定向符</h4>
<p>输出重定向命令<br>
这个符号的作用和&gt;有点类似，但他们的区别是&gt;&gt;是传递并在文件的末尾追加，而&gt;是覆盖</p>
<p>用法同上<br>
同样拿1.txt做例子<br>
使用命令：</p>
<pre><code>echo hello &gt; 1.txt
echo world &gt;&gt;1.txt
</code></pre>
<p>这时候1.txt 内容如下:<br>
hello<br>
world</p>
<h4 id="5-重定向符">5、&lt;、&gt;&amp;、&lt;&amp; 重定向符</h4>
<p>这三个命令也是管道命令，但它们一般不常用。<br>
&lt;，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。</p>
<pre><code>@echo off
echo 2005-05-01&gt;temp.txt
date &lt;temp.txt
del temp.txt
</code></pre>
<p>这样就可以不等待输入直接修改当前日期</p>
<pre><code>&gt;&amp;，将一个句柄的输出写入到另一个句柄的输入中。
&lt;&amp;，刚好和&gt;&amp;相反，从一个句柄读取输入并将其写入到另一个句柄输出中。
</code></pre>
<p>常用句柄：0、1、2，未定义句柄：3—9<br>
1&gt;nul 表示禁止输出正确的信息<br>
2&gt;nul 表示禁止输出错误信息。<br>
其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。</p>
<pre><code>句柄0：标准输入stdin，键盘输入
句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）
句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）
</code></pre>
<p>其中的stdin可被&lt;重定向，stdout可被&gt;、&gt;&gt;重定向，而stderr在DOS下不可直接重定向，只有通过ctty或其它命令将系统控制权转交给其它设备的方式，来间接完成。</p>
<h4 id="6-命令管道符">6、|命令管道符</h4>
<p>格式：第一条命令 | 第二条命令 [| 第三条命令...]<br>
将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。</p>
<p>例如：<br>
<code>dir c:\|find &quot;txt&quot;</code><br>
以上命令是：查找C：\所有，并发现TXT字符串。<br>
FIND的功能请用 FIND /? 自行查看<br>
在不使format的自动格式化参数时，我是这样来自动格式化A盘的<br>
<code>echo y|format a: /s /q /v:system</code><br>
用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令<br>
从而达到自动输入y的目的<code>（这条命令有危害性，测试时请慎重）</code></p>
<h4 id="7-转义字符">7、^转义字符</h4>
<p>^是对特殊符号&lt;,&gt;,&amp;的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。<br>
比如<br>
<code>echo test ^&gt;1.txt</code><br>
结果则是：test &gt; 1.txt<br>
他没有追加在1.txt里，呵呵。只是显示了出来<br>
另外，此转义字符还可以用作续行符号。<br>
举个简单的例子：</p>
<pre><code>@echo off
echo 英雄^
是^
好^
男人
pause
</code></pre>
<h4 id="8-组合命令">8、&amp;组合命令</h4>
<p>语法：第一条命令 &amp; 第二条命令 [&amp; 第三条命令...]<br>
&amp;、&amp;&amp;、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批<br>
处理认行不认命令数目。<br>
这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。<br>
这里&amp;两边的命令是顺序执行的，从前往后执行。<br>
比如：<br>
<code>dir z:\ &amp; dir y:\ &amp; dir c:\</code><br>
以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在</p>
<h4 id="9-组合命令">9、&amp;&amp; 组合命令</h4>
<p>语法：第一条命令 &amp;&amp; 第二条命令 [&amp;&amp; 第三条命令...]<br>
用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令<br>
这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行<br>
<code>dir z:\ &amp;&amp; dir y:\ &amp;&amp; dir c:\</code></p>
<h4 id="10-组合命令">10、||  组合命令</h4>
<p>语法：第一条命令 || 第二条命令 [|| 第三条命令...]<br>
用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；<br>
提示：组合命令和重定向命令一起使用必须注意优先级<br>
管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令<br>
问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。你将如何来搞定这道题？有朋友说，这还不是很easy的问题吗？同时执行两个dir，然后把得到的结果&gt;到a.txt里就ok了嘛，看例：<br>
<code>dir c:\ &amp;&amp; dir d:\ &gt; a.txt</code><br>
仔细研究一下这句执行后的结果，看看是否能达到题目的要求！错了！这样执行后a.txt里只有D盘的信息！为什么？就因为这里&amp;&amp;命令和&gt;命令不能同时出现一个句子里（批处理把一行看成一个句子）！！组合命令&amp;&amp;的优先级没有管道命令&gt;的优先级高。<br>
所以这句在执行时将本行分成这两部分：dir c:\和dir d:\ &gt; a.txt，而并不是如你想的这两部分：dir c:\ &amp;&amp; dir d:\和&gt; a.txt。要使用组合命令&amp;&amp;达到题目的要求，必须得这么写：<br>
<code>dir c:\ &gt; a.txt &amp;&amp; dir d:\ &gt;&gt; a.txt</code><br>
这样，依据优先级高低，DOS将把这句话分成以下两部分：dir c:\ &gt; a.txt和dir d:\ &gt;&gt; a.txt。例十八中的几句的差别比较特殊，值得好好<br>
研究体会一下。<br>
当然这里还可以利用&amp;命令（自己想一下道理哦）：<br>
<code>dir c:\ &gt; a.txt &amp; dir d:\ &gt;&gt; a.txt</code></p>
<h4 id="11-字符串界定符">11、&quot;&quot;  字符串界定符</h4>
<p>双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法</p>
<pre><code>cd &quot;program files&quot;
cd progra~1
cd pro*
</code></pre>
<p>以上三种方法都可以进入program files这个目录</p>
<h4 id="12-逗号">12、, 逗号</h4>
<p>逗号相当于空格，在某些情况下“,”可以用来当做空格使<br>
比如<br>
<code>dir,c:\</code></p>
<h4 id="13-分号">13、; 分号</h4>
<p>分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了）</p>
<p>比如：<br>
<code>dir c:\;d:\;e:\;z:\</code></p>
<p>以上命令相当于<br>
dir c:\<br>
dir d:\<br>
dir e:\<br>
dir f:\<br>
如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。</p>
<p>例：<code>dir c:\;d:\;e:\1.txt</code><br>
以上命令相当于<br>
dir c:\<br>
dir d:\<br>
dir e:\1.txt<br>
其中文件e:\1.txt不存在，但e盘存在，有错误提示，但命令仍会执行。</p>
<p>为什么？如果目标路径不存在，则终止执行；如果路径存在，文件不存在，则继续执行。</p>
<h4 id="14-括号">14、() 括号</h4>
<p>小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。<br>
括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。<br>
例：</p>
<pre><code>命令：echo 1 &amp; echo 2 &amp; echo 3
可以写成：
(
echo 1
echo 2
echo 3
)
</code></pre>
<p>上面两种写法效果一样，这两种写法都被视为是一条命令行。<br>
注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。</p>
<h4 id="15-感叹号">15、! 感叹号</h4>
<p>没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的setlocal命令介绍。</p>
<h2 id="第二章-dos循环for命令详解">第二章 DOS循环：for命令详解</h2>
<p>看了看第一节的东西,发现那些简单的命令都有详细解释,实在想不出什么更好的东西来解释他们,就直接来一个&quot;FOR命令详解&quot;在其中运用这些东西来解释吧!</p>
<p>讲FOR之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在CMD下面输入:name /? 这样的格式来看系统给出的帮助文件,比如for /?   就会把FOR命令的帮助全部显示出来!当然许多菜鸟同志都看不懂....所以才会有那么多批处理文章!!!!俺也照顾菜鸟,把FOR命令用我自己的方式说明下!</p>
<p>正式开始:<br>
FOR这条命令基本上都被用来处理文本,我们这次除了要说他处理文本的作用外还要讲他的其他一些好用的功能!<br>
看看他的基本格式(这里我引用的是批处理中的格式,直接在命令行只需要一个%号)<br>
FOR 参数 %%变量名 IN (相关文件或命令)  DO 执行的命令</p>
<p>参数:FOR有4个参数 /d   /l   /r   /f   他们的作用我在下面用例子解释<br>
%%变量名 :这个变量名可以是单个的小写a-z或者大写A-Z,他们区分大小写哦~, FOR会把每个读取到的值给他!<br>
IN:命令的格式,照写就是了!<br>
(相关文件或命令) :FOR要把什么东西读取然后赋值给变量,不懂的话看下面的例子<br>
do:命令的格式,照写就是了!<br>
执行的命令:对每个变量的值要执行什么操作就写在这.<br>
看不懂我的这些说明,可以在CMD输入for /?看系统提供的帮助!我这里也给出来吧,大家对照</p>
<pre><code>FOR %%variable IN (set) DO command [command-parameters]

  %%variable  指定一个单一字母可替换的参数。
  (set)      指定一个或一组文件。可以使用通配符。
  command    指定对每个文件执行的命令。
  command-parameters
             为特定命令指定参数或命令行开关。
</code></pre>
<p>现在开始讲每个参数的意思<br>
一、参数 /d<br>
<code>FOR /D %variable IN (set) DO command [command-parameters]</code><br>
如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。<br>
如果 Set (也就是我上面写的 &quot;相关文件或命令&quot;) 包含通配符（* 和 ?），将对与 Set 相匹配的每个目录（而不是指定目录中的文件组）执行指定的 Command。<br>
这个参数主要用于目录搜索,不会搜索文件,看这样的例子</p>
<pre><code>@echo off
for /d %%i in (c:\*) do echo %%i
pause
</code></pre>
<p>运行会把C盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!<br>
在来一个,比如我们要把当前路径下文件夹的名字只有1-3个字母的打出来</p>
<pre><code>@echo off
for /d %%i in (???) do echo %%i
pause
</code></pre>
<p>这样的话如果你当前目录下有目录名字只有1-3个字母的,就会显示出来,没有就不显示了<br>
这里解释下<code>*号和?号的作用,*</code>号表示任意N个字符,而?号只表示任意一个字符<br>
知道作用了,给大家个思考题目!</p>
<pre><code>@echo off
for /d %%i in (window?) do echo %%i
pause
</code></pre>
<p>保存到C盘下执行,会显示什么呢?自己看吧! 显示：windows<br>
/D参数只能显示当前目录下的目录名字,这个大家要注意!</p>
<p>二、参数 /R<br>
<code>FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]</code></p>
<pre><code>    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前
</code></pre>
<p>目录。如果集仅为一个单点(.)字符，则枚举该目录树。</p>
<p>递归</p>
<p>上面我们知道,/D只能显示当前路径下的目录名字,那么现在这个/R也是和目录有关,他能干嘛呢?放心他比/D强大多了!<br>
他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!</p>
<blockquote>
<p>请注意2点：<br>
1、set中的文件名如果含有通配符(？或*)，则列举/R参数指定的目录及其下面的所用子目录中与set相符合的所有文件，无相符文件的目录则不列举。<br>
2、相反，如果set中为具体文件名，不含通配符，则枚举该目录树（即列举该目录及其下面的所有子目录），而不管set中的指定文件是否存在。这与前面所说的单点（.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。</p>
</blockquote>
<p>例：</p>
<pre><code>@echo off
for /r c:\ %%i in (*.exe) do echo %%i
pause
</code></pre>
<p>咱们把这个BAT保存到D盘随便哪里然后执行,我会就会看到,他把C盘根目录,和每个目录的子目录下面全部的EXE文件都列出来了!!!!</p>
<p>例：</p>
<pre><code>@echo off
for /r %%i in (*.exe) do @echo %%i
pause
</code></pre>
<p>参数不一样了吧!这个命令前面没加那个C:\也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个BAT你把他放在d:\test目录下执行,<br>
那么他就会把D:\test目录和他下面的子目录的全部EXE文件列出来!!!</p>
<p>例：</p>
<pre><code>@echo off
for /r c:\ %%i in (boot.ini) do echo %%i
pause
</code></pre>
<p>运行本例发现枚举了c盘所有目录，为了只列举boot.ini存在的目录，可改成下面这样：</p>
<pre><code>@echo off
for /r c:\ %%i in (boot.ini) do if exist %%i echo %%i
pause
</code></pre>
<p>用这条命令搜索文件真不错。。。。。。<br>
这个参数大家应该理解了吧!还是满好玩的命令!</p>
<p>三、参数 /L<br>
<code>FOR /L %variable IN (start,step,end) DO command [command-parameters]</code></p>
<blockquote>
<p>该集表示以增量形式从开始到结束的一个数字序列。<br>
因此，(1,1,5) 将产生序列 1 2 3 4 5，(5,-1,1) 将产生<br>
序列 (5 4 3 2 1)。</p>
</blockquote>
<p>使用迭代变量设置起始值 (Start#)，然后逐步执行一组范围的值，直到该值超过所设置的终止值 (End#)。/L 将通过对 Start# 与 End# 进行<br>
比较来执行迭代变量。如果 Start# 小于 End#，就会执行该命令。如果迭代变量超过 End#，则命令解释程序退出此循环。还可以使用负的<br>
Step# 以递减数值的方式逐步执行此范围内的值。例如，(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)。语法是：<br>
看着这说明有点晕吧!咱们看例子就不晕了!</p>
<pre><code>@echo off
for /l %%i in (1,1,5) do @echo %%i
pause
</code></pre>
<p>保存执行看效果,他会打印从1 2 3 4 5  这样5个数字<br>
(1,1,5)这个参数也就是表示从1开始每次加1直到5终止!<br>
等会晕,就打印个数字有P用...好的满足大家,看这个例子</p>
<pre><code>@echo off
for /l %%i in (1,1,5) do start cmd
pause
</code></pre>
<p>执行后是不是吓了一跳,怎么多了5个CMD窗口,呵呵!如果把那个 (1,1,5)改成 (1,1,65535)会有什么结果,我先告诉大家,会打开65535个CMD窗口<br>
....这么多你不死机算你强!<br>
当然我们也可以把那个start cmd改成md %%i 这样就会建立指定个目录了!!!名字为1-65535<br>
看完这个被我赋予破坏性质的参数后,我们来看最后一个参数</p>
<p>四、参数 /F</p>
<p>迭代及文件解析<br>
使用文件解析来处理命令输出、字符串及文件内容。使用迭代变量定义要检查的内容或字符串，并使用各种options选项进一步修改解析方式。</p>
<p>使用options令牌选项指定哪些令牌应该作为迭代变量传递。请注意：在没有使用令牌选项时，/F 将只检查第一个令牌。<br>
文件解析过程包括读取输出、字符串或文件内容，将其分成独立的文本行以及再将每行解析成零个或更多个令牌。然后通过设置为令牌的迭代<br>
变量值，调用 for 循环。默认情况下，/F 传递每个文件每一行的第一个空白分隔符号。跳过空行。</p>
<p>详细的帮助格式为：</p>
<pre><code>FOR /F [&quot;options&quot;] %variable IN (file-set) DO command [command-parameters]
FOR /F [&quot;options&quot;] %variable IN (&quot;string&quot;) DO command [command-parameters]
FOR /F [&quot;options&quot;] %variable IN ('command') DO command [command-parameters]
</code></pre>
<p>带引号的字符串&quot;options&quot;包括一个或多个<br>
指定不同解析选项的关键字。这些关键字为:</p>
<pre><code>        eol=c           - 指一个行注释字符的结尾(就一个)
        skip=n          - 指在文件开始时忽略的行数。
        delims=xxx      - 指分隔符集。这个替换了空格和跳格键的
                          默认分隔符集。
        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代
                          的 for 本身。这会导致额外变量名称的分配。m-n
                          格式为一个范围。通过 nth 符号指定 mth。如果
                          符号字符串中的最后一个字符星号，
                          那么额外的变量将在最后一个符号解析之后
                          分配并接受行的保留文本。

        usebackq        - 使用后引号（键盘上数字1左面的那个键`）。

                          未使用参数usebackq时：file-set表示文件，但不能含有空格
                            双引号表示字符串，即&quot;string&quot;
                            单引号表示执行命令，即'command'

                          使用参数usebackq时：file-set和&quot;file-set&quot;都表示文件
                          当文件路径或名称中有空格时，就可以用双引号括起来
                            单引号表示字符串，即'string'
                            后引号表示命令执行，即`command`
</code></pre>
<p>以上是用for /?命令获得的帮助信息，直接复制过来的。<br>
晕惨了!我这就举个例子帮助大家来理解这些参数!</p>
<p>For命令例1：****************************************</p>
<pre><code>@echo off
rem 首先建立临时文件test.txt
echo ;注释行,这是临时文件,用完删除 &gt;test.txt
echo 11段 12段 13段 14段 15段 16段 &gt;&gt;test.txt
echo 21段,22段,23段,24段,25段,26段 &gt;&gt;test.txt
echo 31段-32段-33段-34段-35段-36段 &gt;&gt;test.txt
FOR /F &quot;eol=; tokens=1,3* delims=,- &quot; %%i in (test.txt) do echo %%i %%j %%k
Pause
Del test.txt
</code></pre>
<p>运行显示结果：</p>
<p>11段 13段 14段 15段 16段<br>
21段 23段 24段,25段,26段<br>
31段 33段 34段-35段-36段<br>
请按任意键继续. . .</p>
<p>为什么会这样?我来解释：</p>
<pre><code>eol=;          分号开头的行为注释行
tokens=1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k
delims=,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后
</code></pre>
<p>For命令例2：****************************************</p>
<pre><code>@echo off
FOR /F &quot;eol= delims=&quot; %%i in (test.txt) do echo %%i
Pause
</code></pre>
<p>运行将显示test.txt全部内容，包括注释行，不解释了哈。</p>
<p>For命令例3：****************************************<br>
另外/F参数还可以以输出命令的结果看这个例子</p>
<pre><code>@echo off
FOR /F &quot;delims=&quot; %%i in ('net user') do @echo %%i
pause
</code></pre>
<p>这样你本机全部帐号名字就出来了把扩号内的内容用两个单引号引起来就表示那个当命令执行,FOR会返回命令的每行结果,加那个&quot;delims=&quot; 是为了让我空格的行能整行显示出来,不加就只显示空格左边一列!<br>
基本上讲完了FOR的基本用法了...如果你看过FOR的系统帮助,你会发现他下面还有一些特定义的变量,这些我先不讲。</p>
<h2 id="第三章-for命令中的变量">第三章 FOR命令中的变量</h2>
<p>FOR命令中有一些变量,他们的用法许多新手朋友还不太了解,今天给大家讲解他们的用法!</p>
<p>我们可以看到每行都有一个大写字母&quot;I&quot;,这个I其实就是我们在FOR带入的变量,我们FOR语句代入的变量名是什么,这里就写什么.<br>
比如:<code>FOR /F %%z IN ('set') DO @echo %%z</code><br>
这里我们代入的变量名是z那么我们就要把那个I改成z,例如%<sub>fI改为%</sub>fz<br>
至于前面的%~p这样的内容就是语法了!</p>
<p>好开始讲解:</p>
<h3 id="一-~i-删除任何引号扩展-i">一、~I 删除任何引号(&quot;)，扩展 %I</h3>
<p>这个变量的作用就如他的说明,删除引号!<br>
我们来看这个例子:<br>
首先建立临时文件temp.txt，内容如下<br>
&quot;1111<br>
&quot;2222&quot;<br>
3333&quot;<br>
&quot;4444&quot;44<br>
&quot;55&quot;55&quot;55</p>
<p>可建立个BAT文件代码如下:</p>
<pre><code>@echo off
echo ^&quot;1111&gt;temp.txt
echo &quot;2222&quot;&gt;&gt;temp.txt
echo 3333^&quot;&gt;&gt;temp.txt
echo &quot;4444&quot;44&gt;&gt;temp.txt
echo ^&quot;55&quot;55&quot;55&gt;&gt;temp.txt
rem 上面建立临时文件，注意不成对的引号要加转义字符^，重定向符号前不要留空格
FOR /F &quot;delims=&quot; %%i IN (temp.txt) DO echo  %%~i
pause
del temp.txt
</code></pre>
<p>执行后,我们看CMD的回显如下:</p>
<pre><code>1111           #字符串前的引号被删除了
2222           #字符串首尾的引号都被删除了
3333&quot;          #字符串前无引号，后面的引号保留
4444&quot;44        #字符串前面的引号删除了，而中间的引号保留
55&quot;55&quot;55       #字符串前面的引号删除了，而中间的引号保留
请按任意键继续. . .
</code></pre>
<p>和之前temp.txt中的内容对比一下,我们会发现第1、2、5行的引号都消失了,这就是删除引号~i的作用了!<br>
删除引号规则如下(BAT兄补充!)<br>
1、若字符串首尾同时存在引号，则删除首尾的引号；<br>
2、若字符串尾不存在引号，则删除字符串首的引号；<br>
3、如果字符串中间存在引号，或者只在尾部存在引号，则不删除。<br>
<code>补充：无头不删，有头连尾删。</code></p>
<h3 id="二-~fi-将-i-扩展到一个完全合格的路径名">二、 %~fI 将 %I 扩展到一个完全合格的路径名</h3>
<p>看例子:<br>
把代码保存放在随便哪个地方,我这里就放桌面吧.</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~fi
pause
</code></pre>
<p>执行后显示内容如下<br>
C:\Documents and Settings\Administrator\桌面\test.bat<br>
C:\Documents and Settings\Administrator\桌面\test.vbs<br>
当我把代码中的 %%~fi直接改成%%i<br>
<code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo %%i pause</code></p>
<p>执行后就会显示以下内容：<br>
test.bat<br>
test.vbs</p>
<p>通过对比,我们很容易就看出没有路径了,这就是&quot;将 %I 扩展到一个完全合格的路径名&quot;的作用<br>
也就是如果%i变量的内容是一个文件名的话,他就会把这个文件所在的绝对路径打印出来,而不只单单打印一个文件名,自己动手动实验下就知道了!</p>
<h3 id="三-~di-仅将-i-扩展到一个驱动器号">三、 %~dI 仅将 %I 扩展到一个驱动器号</h3>
<p>看例子:<br>
代码如下,我还是放到桌面执行!</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~di
pause
</code></pre>
<p>执行后我CMD里显示如下<br>
C:<br>
C:<br>
我桌面就两个文件<code>test.bat,test.vbs,%%~di</code>作用是,如果变量%%i的内容是一个文件或者目录名,他就会把他这文件<br>
或者目录所在的盘符号打印出来!</p>
<h3 id="四-~pi-仅将-i-扩展到一个路径">四、 %~pI 仅将 %I 扩展到一个路径</h3>
<p>这个用法和上面一样,他只打印路径不打印文件名字</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~pi
pause
</code></pre>
<p>我就不打结果了,大家自己复制代码看结果吧,下面几个都是这么个用法,代码给出来,大家自己看结果吧!</p>
<h3 id="五-~ni-仅将-i-扩展到一个文件名">五、 %~nI 仅将 %I 扩展到一个文件名</h3>
<p>只打印文件名字</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ni
pause
</code></pre>
<h3 id="六-~xi-仅将-i-扩展到一个文件扩展名">六、 %~xI 仅将 %I 扩展到一个文件扩展名</h3>
<p>只打印文件的扩展名</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~xi
pause
</code></pre>
<h3 id="七-~si-扩展的路径只含有短名">七、 %~sI 扩展的路径只含有短名</h3>
<p>打印绝对短文件名</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~si
pause
</code></pre>
<h3 id="八-~ai-将-i-扩展到文件的文件属性">八、 %~aI 将 %I 扩展到文件的文件属性</h3>
<p>打印文件的属性</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ai
pause
</code></pre>
<h3 id="九-~ti-将-i-扩展到文件的日期时间">九、 %~tI 将 %I 扩展到文件的日期/时间</h3>
<p>打印文件建立的日期</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~ti
pause
</code></pre>
<h3 id="十-~zi-将-i-扩展到文件的大小">十、 %~zI 将 %I 扩展到文件的大小</h3>
<p>打印文件的大小</p>
<pre><code>FOR /F &quot;delims==&quot; %%i IN ('dir /b') DO @echo  %%~zi
pause
</code></pre>
<p><code>补充：上面例子中的&quot;delims==&quot;可以改为&quot;delims=&quot;，即不要分隔符</code></p>
<h3 id="十一-~pathi-查找列在路径环境变量的目录并将-i-扩展到找到的第一个完全合格的名称-如果环境变量名未被定义或者没有找到文件此组合键会扩展到空字符串">十一、 %~$PATH:I - 查找列在路径环境变量的目录，并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串</h3>
<p>这是最后一个,和上面那些都不一样,我单独说说!<br>
然后在把这些代码保存为批处理,放在桌面。</p>
<pre><code>@echo off
FOR /F &quot;delims=&quot; %%i IN (“notepad.exe”) DO echo  %%~$PATH:i
pause
</code></pre>
<p>补充：上面代码显示结果为C:\WINDOWS\system32\notepad.exe<br>
他的意思就在PATH变量里指定的路径里搜索notepad.exe文件，如果有notepad.exe则会把他所在绝对路径打印出来，没有就打印一个错误！<br>
好了,FOR的的变量就介绍到这了!</p>
<h2 id="第四章-批处理中的变量">第四章 批处理中的变量</h2>
<p>批处理中的变量,我把他分为两类,分别为&quot;系统变量&quot;和&quot;自定义变量&quot;<br>
我们现在来详解这两个变量!</p>
<h3 id="一-系统变量">一、系统变量</h3>
<p>他们的值由系统将其根据事先定义的条件自动赋值,也就是这些变量系统已经给他们定义了值,<br>
不需要我们来给他赋值,我们只需要调用而以!  我把他们全部列出来!</p>
<pre><code>%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。
%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。
%CD% 本地 返回当前目录字符串。
%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。
%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。
%COMPUTERNAME%  系统 返回计算机的名称。
%COMSPEC%  系统 返回命令行解释器可执行程序的准确路径。
%DATE%  系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关
date 命令的详细信息，请参阅 Date。
%ERRORLEVEL%  系统 返回上一条命令的错误代码。通常用非零值表示错误。
%HOMEDRIVE%  系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用
户主目录是在“本地用户和组”中指定的。
%HOMEPATH%  系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。
%HOMESHARE%  系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是
在“本地用户和组”中指定的。
%LOGONSERVER%  本地 返回验证当前登录会话的域控制器的名称。
%NUMBER_OF_PROCESSORS%  系统 指定安装在计算机上的处理器的数目。
%OS%  系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。
%PATH% 系统 指定可执行文件的搜索路径。
%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。
%PROCESSOR_ARCHITECTURE%  系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于
Itanium
%PROCESSOR_IDENTIFIER% 系统 返回处理器说明。
%PROCESSOR_LEVEL%  系统 返回计算机上安装的处理器的型号。
%PROCESSOR_REVISION% 系统 返回处理器的版本号。
%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。
%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。
%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。
%SYSTEMROOT%  系统 返回 Windows server operating system 根目录的位置。
%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。
有些应用程序需要 TEMP，而其他应用程序则需要 TMP。
%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关
time 命令的详细信息，请参阅 Time。
%USERDOMAIN% 本地 返回包含用户帐户的域的名称。
%USERNAME% 本地 返回当前登录的用户的名称。
%USERPROFILE% 本地 返回当前用户的配置文件的位置。
%WINDIR% 系统 返回操作系统目录的位置。
这么多系统变量,我们如何知道他的值是什么呢?
在CMD里输入  echo %WINDIR%
这样就能显示一个变量的值了!
</code></pre>
<p>举个实际例子,比如我们要复制文件到当前帐号的启动目录里就可以这样<br>
<code>copy d:\1.bat &quot;%USERPROFILE%\「开始」菜单\程序\启动\&quot; %USERNAME% 本地 返回当前登录的用户的名称。 注意有空格的目录要用引号引起来</code></p>
<p>另外还有一些系统变量,他们是代表一个意思,或者一个操作!<br>
他们分别是%0 %1 %2 %3 %4 %5 ......一直到%9 还有一个%*<br>
%0 这个有点特殊,有几层意思,先讲%1-%9的意思.<br>
%1 返回批处理的第一个参数<br>
%2 返回批处理的第二个参数<br>
%3-%9依此推类<br>
反回批处理参数?到底怎么个返回法?<br>
我们看这个例子,把下面的代码保存为test.BAT然后放到C盘下</p>
<pre><code>@echo off
echo %1 %2 %3 %4
echo %1
echo %2
echo %3
echo %4
</code></pre>
<p>进入CMD,输入cd c:\<br>
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>注意中间的空格,我们会看到这样的结果:<br>
我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数<br>
我是第一个参数<br>
我是第二个参数<br>
我是第三个参数<br>
我是第四个参数</p>
<p>对比下代码,%1就是”我是第一个参数”  %2就是”我是第二个参数”<br>
怎么样理解了吧!</p>
<p>这些%1和%9可以让批处理也能带参数运行,大大提高批处理功能!<br>
还有一个%*  他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数的值,不用在输入%1 %2来确定一个个的</p>
<p>例子</p>
<pre><code>@echo off
echo %*
</code></pre>
<p>同样保存为test.bat 放到C盘<br>
进入CMD,输入cd c:\<br>
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数</p>
<p>可以看到他一次把全部参数都显示出来了<br>
好现在开始讲那个比较特殊的%0<br>
%0  这个不是返回参数的值了,他有两层意思!<br>
第一层意思:返回批处理所在绝对路径</p>
<p>例子:</p>
<pre><code>@echo off
echo %0
pause
</code></pre>
<p>保存为test.BAT放在桌面运行,会显示如下结果<br>
<code>&quot;C:\Documents and Settings\Administrator\桌面\test.bat&quot;</code><br>
他把当前批处理执行的所在路经打印出来了,这就是返回批处理所在绝对路径的意思<br>
第二层意思:无限循环执行BAT</p>
<p>例子:</p>
<pre><code>@echo off
net user
%0
</code></pre>
<p>保存为BAT执行,他就会无限循环执行net user这条命令,直到你手动停止.<br>
补充：其实%0就是第一参数%1前面那个参数，当然就是批处理文件名（包括路径）。</p>
<p>以上就是批处理中的一些系统变量,另外还有一些变量,他们也表示一些功能,<br>
FOR命令中的那些就是,FOR变量已经说过,就不讲了.</p>
<h3 id="二-自定义变量">二、自定义变量</h3>
<p>故名思意,自定义变量就是由我们来给他赋予值的变量<br>
要使用自定义变量就得使用set命令了,看例子.</p>
<pre><code>@echo off
set var=我是值
echo %var%
pause
</code></pre>
<p>保存为BAT执行,我们会看到CMD里返回一个  &quot;我是值&quot;</p>
<p>var为变量名,=号右变的是要给变量的值<br>
这就是最简单的一种设置变量的方法了</p>
<p>如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用set命令的/p参数</p>
<p>例子:</p>
<pre><code>@echo off
set /p var=请输入变量的值
echo %var%
pause
</code></pre>
<p>var变量名  =号右边的是提示语,不是变量的值<br>
变量的值由我们运行后自己用键盘输入!<br>
好了批处理的变量先介绍到这,关于set命令,下次再写个专门的文章吧.</p>
<h2 id="第五章-set命令详解">第五章 set命令详解</h2>
<p>在上一贴中我简单的介绍了一下SET设置自定义变量的作用,现在我来具体讲一下set的其他功能.</p>
<h3 id="一-用set命令设置自定义变量">一、用set命令设置自定义变量</h3>
<p>显示、设置或删除 cmd.exe 环境变量。</p>
<pre><code>SET [variable=[string]]
variable  指定环境变量名。
string    指定要指派给变量的一系列字符串。
</code></pre>
<p>要显示当前环境变量，键入不带参数的 SET。<br>
SET 命令不允许变量名含有等号。</p>
<p>例子:</p>
<pre><code>@echo off
set var=我是值
echo %var%
pause
</code></pre>
<p>请看 set var=我是值 ,这就是BAT直接在批处理中设置变量的方法!<br>
set 是命令   var是变量名  =号右边的&quot;我是值&quot;是变量的值<br>
在批处理中我们要引用这个变就把var变量名用两个%(百分号)扩起来,如%var%<br>
SET还可以提供一个交互界面,让用户自己输入变量的值,然后我们在来根据这个值来做相应操作,现在我就来说说SET的这种语法,只需要加一个&quot;/P&quot;参数就可以了!<br>
<code>SET /P variable=[promptString]</code></p>
<p>例子:</p>
<pre><code>@echo off
set /p var=请输入变量的值:
echo 您输入了 %var%  ~_~
pause
</code></pre>
<p>set /p 是命令语法  var是变量名    =号右边的&quot;请输入变量的值: &quot;,这个是提示语,不是变量的值了!<br>
运行后,我们在提示语后面直接输入1,就会显示一行您输入了 <code>1 ~_~</code><br>
好了,先回顾到这,现在讲SET其他功能</p>
<p>使用set /?查看SET的帮助我们发现SET除了我上面讲的<br>
SET [variable=[string]]<br>
SET /P variable=[promptString]<br>
这两种语法外,还有如下几种语法:<br>
<code>SET /A expression</code><br>
环境变量替换已如下增强:</p>
<pre><code>%PATH:str1=str2%
%PATH:~10,5%
%PATH:~-10%
%PATH:~0,-2%
</code></pre>
<p>这机种语法有什么用处呢?下面我们来一个个讲解他们!</p>
<h3 id="二-用set命令进行简单计算">二、用set命令进行简单计算</h3>
<p>语法：SET /A expression<br>
/A 命令行开关指定等号右边的字符串为被评估的数字表达式。该表达式<br>
评估器很简单并以递减的优先权顺序支持下列操作:</p>
<pre><code>    ()                  -分组
    ! ~ -               -一元运算符
    * / %               -算数运算符
    + -                 -算数运算符
    &lt;&lt; &gt;&gt;               -二进制逻辑移位
    &amp;                   -二进制按位“与”
    ^                   -二进制按位“异”
    |                   -二进制按位“或”
    = *= /= %= += -=    -算数赋值
    &amp;= ^= |= &lt;&lt;= &gt;&gt;=    -二进制运算赋值
    ,                   -表达式分隔符
</code></pre>
<p>上面这些是系统帮助里的内容,看着是不是有点晕，没关系我来简单解释一下:<br>
set的/A参数就是让SET可以支持数学符号进行加减等一些数学运算!</p>
<p>现在开始举例子介绍这些数学符号的用法:<br>
例：</p>
<pre><code>@echo off
set /p input=请输入计算表达式：
set /a var=%input%
echo 计算结果：%input%=%var%
pause

请看下面几个运算过程：
注意：DOS计算只能精确到整数

请输入计算表达式：1+9+20+30-10
计算结果：1+9+20+30-10=50
请按任意键继续. . .

请输入计算表达式：10/3
计算结果：10/3=3  #DOS计算精确到整数，小数舍了。
请按任意键继续. . .

请输入计算表达式：-100+62
计算结果：-100+62=-38
请按任意键继续. . .

请输入计算表达式：100%3    ＃求余数
计算结果：100%3=1
请按任意键继续. . .

请输入计算表达式：(25+75)*2/(15+5)
计算结果：(25+75)*2/(15+5)=10
请按任意键继续. . .

请输入计算表达式：1234567890*9876543210
无效数字。数字精确度限为 32 位。
计算结果：1234567890*9876543210=
请按任意键继续. . .
</code></pre>
<p>注意：上面的计算过程显示，DOS计算只能精确到32位，这个32位是指二进制32位，其中最高位为符号位（0为正，1为负），低位31位为数值。<br>
31个1换成十进制为2147483647，所以DOS计算的有效值范围是-2147483647至2147483647，超出该数值范围时计算出错，请看下面的计算过程：</p>
<p>请输入计算表达式：2147483647-1    ＃最大值减1，值有效<br>
计算结果：2147483647-1=2147483646<br>
请按任意键继续. . .</p>
<p>运行set /a a=1+1,b=2+1,c=3+1后会显示一个4,但我们用<br>
echo %a% %b% %c%后看结果,会发现其他数学运算也有效果!,这就是&quot;逗&quot;号的<br>
作用!</p>
<p>有时候我们需要直接在原变量进行加减操作就可以用这种语法<br>
set /a var+=1  这样的语法对应原始语法就是set /a var = %var% + 1<br>
都是一样的结果,在原变量的值上在进行数学运算,不过这样写简单一点<br>
再来一个:<br>
<code>set /a var*=2</code><br>
其他都这么用,只要帮助里有这个语法!<br>
另外还有一些用逻辑或取余操作符,这些符号,按照上面的使用方法会报错的</p>
<p>比如我们在CMD里输入set /a var=1 &amp; 1 &quot;与运算&quot;,他并不会显示为1,而是报错,<br>
为什么?对于这样的&quot;逻辑或取余操作符&quot;,我们需要把他们用双引号引起来,也可以用转义字符^，看例子</p>
<p>set /a var= 1 &quot;&amp;&quot; 1 这样结果就显示出来了,其他逻辑或取余操作符用法<br>
set /a var= 1 &quot;+&quot; 1 异运算<br>
set /a var= 1 &quot;%&quot; 1  取模运算<br>
set /a var= 3 &quot;&lt;&lt;&quot; 2 左移位运算， 3的二进制为11，左移2位为1100，换成十进制就是12，自行验证<br>
set /a var= 4 &quot;&gt;&gt;&quot; 2右移位运算，4的二进制为100，右移动2位为1，结果为1<br>
还有几个数学不太行,搞不清楚了....不列出来了,<br>
<code>补充：凡是按位计算均需换算成二进制，下面行中的符号均针对二进制</code><br>
这些符号也可以用&amp;= ^= |= &lt;&lt;= &gt;&gt;= 这样的简单用法如<br>
<code>set /a var&quot;&amp;=&quot; 1 等于set /a var = %var% &quot;&amp;&quot; 1</code>注意引号</p>
<p>思考题：求2的n次方<br>
答案：</p>
<pre><code>@echo off
set /p n=请输入2的几次方:
set /a num=1^&lt;^&lt;n
echo %num%
pause
</code></pre>
<h3 id="三-用set命令进行字符串处理">三、用set命令进行字符串处理</h3>
<h4 id="1-字符串替换">1、字符串替换</h4>
<p>好了，符号说到这，现在说<code>%PATH:str1=str2%</code><br>
上面语法的意思就是：将字符串变量%PATH%中的str1替换为str2<br>
这个是替换变量值的内容,看例子</p>
<pre><code>@echo off
set a= bbs. verybat. cn
echo 替换前的值: &quot;%a%&quot;
set var=%a: =%
echo 替换后的值: &quot;%var%&quot;
pause
</code></pre>
<p>运行显示：<br>
替换前的值: &quot; bbs. verybat. cn&quot;<br>
替换后的值: &quot;bbs.verybat.cn&quot;</p>
<p>对比一下,我们发现他把变量%a%的空格给替换掉了,从这个例子,我们就可以发现<br>
<code>%PATH:str1=str2%</code>这个操作就是把变量%PATH%的里的str1全部用str2替换</p>
<p>比如我们把上面的例子改成这样</p>
<pre><code>@echo off
set a=bbs.verybat.cn
echo 替换前的值: &quot;%a%&quot;
set var=%a:.=喵喵喵%
echo 替换后的值: &quot;%var%&quot;
pause
</code></pre>
<p>运行显示：<br>
替换前的值: &quot;bbs.verybat.cn&quot;<br>
替换后的值: &quot;bbs喵喵喵verybat喵喵喵cn&quot;</p>
<p>解释set var=%a:.=喵喵喵%<br>
set是命令 var是变量名 字a是要进行字符替换的变量的值,&quot;.&quot;为要替换的值,<br>
&quot;喵喵喵&quot;为替换后的值!<br>
执行后就会把变量%a%里面的&quot;.&quot;全部替换为&quot;喵喵喵&quot;<br>
这就是set的替换字符的很好的功能! 替换功能先讲到这，下面将字符串截取功能</p>
<h4 id="2-字符串截取">2、字符串截取</h4>
<hr>
<p>截取功能统一语法格式为：%a:~[m[,n]]%</p>
<hr>
<p>方括号表示可选，%为变量标识符，a为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）<br>
<code>%PATH:~10,5%</code>  这个什么意思,看例子:</p>
<p>截取功能例子1：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~1,2%
echo %var%
pause
</code></pre>
<p>执行后,我们会发现只显示了&quot;bs&quot;两个字母,我们的变量%a%的值不是为<code>bbs.verybat.cn</code>吗？<br>
怎么只显示了第2个字母和第3个字母&quot;bs&quot;,分析一结果我们就可以很容易看出<br>
<code>%PATH:~10,5%</code>就是显示变量PATH里从11位（偏移量10）开始的5个字符!<br>
分析<code>set var=%a:~1,2%</code><br>
set是命令，var是变量值，a要进行字符操作的变量，&quot;1&quot;从变量&quot;a&quot;第几位开始显示，&quot;2&quot;表示显示几位。<br>
合起来就是把变量a的值从第2位（偏移量1）开始,把2个字符赋予给变量var<br>
这样应该明白了吧~</p>
<p>其他两种语法<br>
%PATH:~-10%<br>
%PATH:~0,-2%<br>
他们也是显示指定变量指定几位的值的意思</p>
<p><code>%PATH:~-10%</code>看例子<br>
截取功能例子2：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~-3%
echo %var%
pause
</code></pre>
<p>运行结果：.cn<br>
这个就是把变量a倒数3位的值给变量VAR</p>
<p>当然我们也可以改成这样<br>
截取功能例子3：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~3%
echo %var%
pause
</code></pre>
<p>运行显示：.verybat.cn<br>
这个就是把变量a的从第3位开始后面全部的值给变量VAR<br>
<code>%PATH:~0,-2%</code>  例子</p>
<p>截取功能例子4：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~0,-3%
echo %var%
pause
</code></pre>
<p>执行后,我们发现显示的是&quot;bbs.verybat&quot;,少了&quot;.cn&quot;<br>
从结果分析,很容易分析出,这是把变量a的值从0位开始,<br>
到倒数第三位之间的值全部赋予给var</p>
<p>如果改成这样</p>
<p>截取功能例子5：</p>
<pre><code>@echo off
set a=bbs.verybat.cn
set var=%a:~2,-3%
echo %var%
pause
</code></pre>
<p>运行显示：s.verybat<br>
那么他就是显示从第3位（偏移量2）开始减去倒数三位字符的值,并赋予给变量var<br>
讲得好，例子就是说明问题，为便于记忆，小节如下：</p>
<pre><code>a=bbs.verybat.cn
%a:~1,2%   ＝“bs”   偏移量1，从第二位开始向右取2位
%a:~-3%    ＝“.cn”  偏移量负3，即倒数3位（也可理解为留下右边3位），右取全部
%a:~3%     ＝“.verybat.cn” 偏移量3（也可理解为去掉左边3位），右取全部
%a:~0,-3%   ＝“bbs.verybat” 偏移量0，右取长度至负3，即倒数3位
%a:~2,-3%   ＝“s.verybat”  偏移量2，右取长度至负3，即倒数3位
</code></pre>
<hr>
<p>所以，截取功能统一语法格式为：%a:~[m[,n]]%</p>
<hr>
<p>方括号表示可选，%a%为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n</p>
<p>为截取长度（缺省为全部）<br>
上面所述用法其实相当于vbs函数mid、left、right</p>
<pre><code>&gt;%a:~0,n%  相当于函数left(a,n)  取左边n位
%a:~-m%  相当于函数right（a,m） 取右边m位
%a:~m,n% 相当于函数mid(a,m+1,n) 从m+1位开始取n位
%a:~m,-n% 相当于函数mid(a,m+1,len(a)-m-n)
%a:~m %  相当于函数mid(a,m+1,len(a)-m) 或者right(a,len(a)-m)
</code></pre>
<p>思考题目：输入任意字符串，求字符串的长度<br>
参考答案：</p>
<pre><code>@echo off
set /p str=请输入任意长度的字符串:
echo 你输入了字符串:&quot;%str%&quot;
if not defined str (pause &amp; goto :eof)
set num=0
:len
set /a num+=1
set str=%str:~0,-1%
if defined str goto len
echo 字符串长度为：%num%
pause
</code></pre>
<p>好了set的一些用法,就介绍到这了。</p>
<h2 id="第六章-if命令讲解">第六章 if命令讲解</h2>
<p>最近发现有些朋友一老问IF命令的用法,IF命令个人觉得很简单,所以就一直没把发放到新手教学贴里说,现在我给补上一文,希望对各位&quot;非常<br>
BAT的&quot;新手朋友们有所帮助.</p>
<p>现在开始:</p>
<p>在CMD使用IF /?打开IF的系统帮助(自己看我就不全部列出来了),我们会发现IF有3种基本的用法!<br>
执行批处理程序中的条件处理。</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command

  NOT               指定只有条件为 false 的情况下， Windows XP 才
                    应该执行该命令。

  ERRORLEVEL number 如果最后运行的程序返回一个等于或大于
                    指定数字的退出编码，指定条件为 true。

  string1==string2  如果指定的文字字符串匹配，指定条件为 true。

  EXIST filename    如果指定的文件名存在，指定条件为 true。

  command           如果符合条件，指定要执行的命令。如果指定的
                     条件为 FALSE，命令后可跟一个执行 ELSE
                      关键字后的命令的 ELSE 命令。

ELSE 子句必须在 IF 之后出现在同一行上。例如:

    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )
</code></pre>
<p>第一种用法：<code>IF [NOT] ERRORLEVEL number command</code><br>
这个用法的基本做用是判断上一条命令执行结果的代码,以决定下一个步骤.<br>
一般上一条命令的执行结果代码只有两结果,&quot;成功&quot;用0表示  &quot;失败&quot;用1表示.</p>
<p>举个例子:</p>
<pre><code>@echo off
net user
IF %ERRORLEVEL% == 0 echo net user 执行成功了!
pause
</code></pre>
<p>这是个简单判断上条命令是否执行成功.<br>
细心的朋友可能会发现,这个用法和帮助里的用法不太一样,按照帮助里的写法&quot;IF %ERRORLEVEL% == 0 echo net user 执行成功了!&quot;这一句</p>
<p>代码应该写成:IF ERRORLEVEL 0 echo net user 执行成功了!<br>
那为什么我要写成这样呢?各位自己把代码改掉执行后,就会发现错误了!用这种语法,不管你的上面的命令是否执行成功,他都会认为命令成功了<br>
,不知道是BUG还是本人理解错误...</p>
<p>补充：这不是bug，而是 if errorlevel 语句的特点：当使用 if errorlevel 0 …… 的句式时，它的含义是：如果错误码的值大于或等于0的时候，将执行某个操作；当使用 if %errorlevel%==0 …… 的句式时，它的含义是：如果错误码的值等于0的时候，将执行某操作。因为这两种句式含义的差别，如果使用前一种句式的时候，错误码语句的排列顺序是从大到小排列%ERRORLEVEL% 这是个系统变量,返回上条命令的执行结果代码! &quot;成功&quot;用0表示  &quot;失败&quot;用1表示. 当然还有其他参数,用的时候基本就这两数字.</p>
<p>一般上一条命令的执行结果代码只有两结果,&quot;成功&quot;用0表示  &quot;失败&quot;用1表示<br>
　　这只是一般的情况，实际上，errorlevel返回值可以在0~255之间，比如，xcopy默认的errorlevel值就有5个，分别表示5种执行状态：</p>
<p>退出码 说明<br>
0 文件复制没有错误。<br>
1 if errorlevel 2 echo。<br>
2 用户按 CTRL+C 终止了 xcopy。<br>
4 出现了初始化错误。没有足够的内存或磁盘空间，或命令行上输入了无效的驱动器名称或语法。<br>
5 出现了磁盘写入错误。</p>
<p>要判断上面xcopy命令的5种退出情况，应写成：</p>
<pre><code>if errorlevel 5 echo出现了磁盘写入错误
if errorlevel 4 echo出现了初始化错误
if errorlevel 2 echo用户按 CTRL+C 终止了 xcopy
if errorlevel 1 echo if errorlevel 2 echo
if errorlevel 0 echo文件复制没有错误。
才能正确执行。
</code></pre>
<p>补充完毕。<br>
再举几个例子给新手理解</p>
<pre><code>@echo off
net usertest
IF %ERRORLEVEL% == 1 echo net user 执行失败了!
pause
</code></pre>
<p>这个是判断上一条命令是否执行失败的</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0 goto yes
goto no
:yes
echo !var! 执行成功了
pause
exit
:no
echo 基本上执行失败了..
pause
</code></pre>
<p>这个是根据你输入的命令,自动判断是成功还是失败了!<br>
在来一个简化版的</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0 (echo %var%执行成功了) ELSE echo %var%执行失败了!
pause
</code></pre>
<p>else后面写上执行失败后的操作!<br>
当然我门还可以把if else这样的语句分成几行写出来,使他看上去好看点...</p>
<pre><code>@echo off
set /p var=随便输入个命令:
%var%
if %ERRORLEVEL% == 0  (
   echo !var! 执行成功了
   ) ELSE (
   echo 基本上执行失败了..
   )
pause
</code></pre>
<p>这里介绍的两种简写对IF的三种语法都可以套用,不单单是在IF [NOT] ERRORLEVEL number command<br>
这种法上才能用<br>
<code>第二种用法：IF [NOT] string1 == string2 command</code><br>
这个呢就是用来比较变量或者字符的值是不是相等的.</p>
<p>例子</p>
<pre><code>@echo off
set /p var=请输入第一个比较字符:
set /p var2=请输入第二个比较字符:
if %var% == %var2% (echo 我们相等) ELSE echo 我们不相等
pause
</code></pre>
<p>上面这个例子可以判断你输入的值是不是相等,但是你如果输入相同的字符,但是如果其中一个后面打了一个空格,<br>
这个例子还是会认为相等,如何让有空格的输入不相等呢?我们在比较字符上加个双引号就可以了.</p>
<pre><code>@echo off
set /p var=请输入第一个比较字符:
set /p var2=请输入第二个比较字符(多输入个空格试试):
if &quot;%var%&quot; == &quot;%var2%&quot; (echo 我们相等) ELSE echo 我们不相等
pause
</code></pre>
<p><code>第三种用法：IF [NOT] EXIST filename command</code><br>
这个就是判断某个文件或者文件夹是否存在的语法<br>
例子</p>
<pre><code>@echo off
if exist &quot;c:\test&quot; (echo 存在文件) ELSE echo 不存在文件
pause
</code></pre>
<p>判断的文件路径加引号是为了防止路径有空格,如果路径有空格加个双引号就不会出现判断出错了!<br>
这个语法没什么太多的用法,基本就这样了,就不多介绍了.<br>
另外我们看到每条IF用法后都有个[NOT]语句,这啥意思?其他加上他的话,就表示先判断我们的条件不成立时,<br>
没加他默认是先判断条件成立时,比如上面这个例子</p>
<pre><code>@echo off
if not exist &quot;c:\test&quot; (echo 存在文件) ELSE echo 不存在文件
pause
</code></pre>
<p>加个NOT,执行后有什么结果,如果你的C盘下根本就没c:\test,他还是会显示&quot;存在文件&quot;,这就表示了加了NOT就<br>
会先判断条件失败!懂了吧,上面例子改成这样就正确了!</p>
<pre><code>@echo off
if not exist &quot;c:\test&quot; (echo 不存在文件) ELSE echo 存在文件
pause
</code></pre>
<p><code>第四种用法：IF增强的用法</code><br>
IF [/I] string1 compare-op string2 command<br>
IF CMDEXTVERSION number command<br>
IF DEFINED variable command</p>
<p>后面两个用法,我不做介绍,因为他们和上面的用法表示的意义基本一样,只简单说说  IF [/I] string1 compare-op string2 command这个语句<br>
在判断字符时不区分字符的大小写。</p>
<p>CMDEXTVERSION 条件的作用跟 ERRORLEVEL 的一样，除了它<br>
是在跟与命令扩展名有关联的内部版本号比较。第一个版本<br>
是 1。每次对命令扩展名有相当大的增强时，版本号会增加一个。<br>
命令扩展名被停用时，CMDEXTVERSION 条件不是真的。</p>
<p>如果已定义环境变量，DEFINED 条件的作用跟 EXISTS 的一样，<br>
除了它取得一个环境变量，返回的结果是 true。</p>
<pre><code>@echo off
if a == A (echo 我们相等) ELSE echo 我们不相等
pause
</code></pre>
<p>执行后会显示：我们不相等</p>
<pre><code>@echo off
if /i a == A (echo 我们相等) ELSE echo 我们不相等
pause
</code></pre>
<p>加上/I不区分大小写就相等了!<br>
最后面还有一些用来判断数字的符号</p>
<pre><code>    EQU - 等于
    NEQ - 不等于
    LSS - 小于
    LEQ - 小于或等于
    GTR - 大于
    GEQ - 大于或等于
</code></pre>
<p>我就举一个例子,大家都懂数学...不讲多了</p>
<pre><code>@echo off
set /p var=请输入一个数字:
if %var% LEQ  4 (echo 我小于等于4) ELSE echo 我不小于等于4
pause
</code></pre>
<h2 id="第七章-dos编程高级技巧">第七章 DOS编程高级技巧</h2>
<h3 id="一-交互界面设计">一、交互界面设计</h3>
<p>没啥说的，看看高手设计的菜单界面吧：</p>
<pre><code>@echo off
cls
title 终极多功能修复
:menu
cls
color 0A
echo.
echo                 ==============================
echo                 请选择要进行的操作，然后按回车
echo                 ==============================
echo.
echo              1.网络修复及上网相关设置,修复IE,自定义屏蔽网站
echo.
echo              2.病毒专杀工具，端口关闭工具,关闭自动播放
echo.
echo              3.清除所有多余的自启动项目，修复系统错误
echo.
echo              4.清理系统垃圾,提高启动速度
echo.
echo              Q.退出
echo.
echo.
:cho
set choice=
set /p choice=          请选择:
IF NOT &quot;%choice%&quot;==&quot;&quot; SET choice=%choice:~0,1%
if /i &quot;%choice%&quot;==&quot;1&quot; goto ip
if /i &quot;%choice%&quot;==&quot;2&quot; goto setsave
if /i &quot;%choice%&quot;==&quot;3&quot; goto kaiji
if /i &quot;%choice%&quot;==&quot;4&quot; goto clean
if /i &quot;%choice%&quot;==&quot;Q&quot; goto endd
echo 选择无效，请重新输入
echo.
goto cho
</code></pre>
<p>只要学完本教程前面的章节，上面的程序应该能看懂了。</p>
<h3 id="二-ifelse条件语句">二、if…else…条件语句</h3>
<p>前面已经谈到，DOS条件语句主要有以下形式</p>
<pre><code>IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
增强用法：IF [/I] string1 compare-op string2 command
增强用法中加上/I就不区分大小写了!
增强用法中还有一些用来判断数字的符号：
</code></pre>
<p>EQU - 等于<br>
NEQ - 不等于<br>
LSS - 小于<br>
LEQ - 小于或等于<br>
GTR - 大于<br>
GEQ - 大于或等于</p>
<p>上面的command命令都可以用小括号来使用多条命令的组合，包括else子句，组合命令中可以嵌套使用条件或循环命令。</p>
<p>例如:</p>
<pre><code>    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )
</code></pre>
<p>也可写成：<br>
<code>if exist filename (del filename) else (echo filename missing)</code><br>
但这种写法不适合命令太多或嵌套命令的使用。</p>
<h3 id="三-循环语句">三、循环语句</h3>
<p>1、指定次数循环<br>
FOR /L %variable IN (start,step,end) DO command [command-parameters]</p>
<p>组合命令：<br>
FOR /L %variable IN (start,step,end) DO (<br>
Command1<br>
Command2<br>
……<br>
)</p>
<p>2、对某集合执行循环语句。<br>
<code>FOR %%variable IN (set) DO command [command-parameters]</code></p>
<p>%%variable  指定一个单一字母可替换的参数。<br>
(set)      指定一个或一组文件。可以使用通配符。<br>
command   对每个文件执行的命令，可用小括号使用多条命令组合。</p>
<pre><code>FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]

    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前
目录。如果集仅为一个单点(.)字符，则枚举该目录树。
</code></pre>
<p>同前面一样，command可以用括号来组合：</p>
<pre><code>FOR /R [[drive:]path] %variable IN (set) DO (
Command1
Command2
……
commandn
)
</code></pre>
<p>3、条件循环<br>
利用goto语句和条件判断，dos可以实现条件循环，很简单啦，看例子：</p>
<pre><code>@echo off
set var=0
rem ************循环开始了
:continue
set /a var+=1
echo 第%var%此循环
if %var% lss 100 goto continue
rem ************循环结束了
echo 循环执行完毕
pause
</code></pre>
<h3 id="四-子程序">四、子程序</h3>
<p>在批处理程序中可以调用外部可运行程序，比如exe程序，也可调用其他批处理程序，这些也可以看作子程序，但是不够方便，如果被调用的程序很多，就显得不够简明了，很繁琐。<br>
在windowsXP中，批处理可以调用本程序中的一个程序段，相当于子程序，这些子程序一般放在主程序后面。</p>
<p>子程序调用格式：<br>
<code>CALL :label arguments</code></p>
<p>子程序语法：</p>
<pre><code>:label
command1
command2


commandn
goto :eof
</code></pre>
<p>传至子程序的参数在call语句中指定，在子程序中用%1、%2至%9的形式调用，而子程序返回主程序的数据只需在调用结束后直接引用就可以了，当然也可以指定返回变量，请看下面的例子。<br>
子程序例1：</p>
<pre><code>@echo off
call :sub return 你好
echo 子程序返回值：%return%
pause

:sub
set %1=%2
goto :eof
</code></pre>
<p>运行结果：你好<br>
子程序例2：设计一个求多个整数相加的子程序</p>
<pre><code>@echo off
set sum=0
call :sub sum 10 20 35
echo 数据求和结果：%sum%
pause

:sub
rem 参数1为返回变量名称
set /a %1=%1+%2
shift /2
if not &quot;%2&quot;==&quot;&quot; goto sub
goto :eof
</code></pre>
<p>运行结果：65<br>
在win98系统中，不支持上面这种标号调用，须将子程序单独保存为一个批处理程序，然后调用。</p>
<h3 id="五-用ftp命令实现自动下载">五、用ftp命令实现自动下载</h3>
<p>ftp是常用的下载工具，ftp界面中有40多个常用命令，自己学习了，不介绍了。这里介绍如何用dos命令行调用ftp命令，实现ftp自动登录，并上传下载，并自动退出ftp程序。<br>
其实可以将ftp命令组合保存为一个文本文件，然后用以下命令调用即可。</p>
<p><code>ftp -n -s:[[drive:]path]filename</code></p>
<p>上面的filename为ftp命令文件，包括登录IP地址，用户名、密码、操作命令等<br>
例：</p>
<pre><code>open 90.52.8.3   ＃打开ip
user iware       ＃用户为iware
password8848    ＃密码
bin             ＃二进制传输模式
prompt
cd tmp1         ＃切换至iware用户下的tmp1目录
pwd
lcd d:\download   ＃本地目录
mget *          ＃下载tmp1目录下的所有文件
bye             ＃退出ftp
</code></pre>
<h3 id="六-用7-zip实现命令行压缩和解压功能">六、用7-ZIP实现命令行压缩和解压功能</h3>
<p>语法格式：（详细情况见7-zip帮助文件，看得头晕可以跳过，用到再学）</p>
<pre><code>7z &lt;command&gt; [&lt;switch&gt;...] &lt;base_archive_name&gt; [&lt;arguments&gt;...]  
7z.exe的每个命令都有不同的参数&lt;switch&gt;,请看帮助文件  
&lt;base_archive_name&gt;为压缩包名称  
&lt;arguments&gt;为文件名称，支持通配符或文件列表  
其中，7z是至命令行压缩解压程序7z.exe，&lt;command&gt;是7z.exe包含的命令，列举如下：  
</code></pre>
<pre><code>a： Adds files to archive. 添加至压缩包
a命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -sfx (create SFX)
  -si (use StdIn)
  -so (use StdOut)
  -ssw (Compress shared files)
  -t (Type of archive)
  -u (Update)
  -v (Volumes)
  -w (Working Dir)
  -x (Exclude)
</code></pre>
<p>b： Benchmark</p>
<pre><code>d： Deletes files from archive. 从压缩包中删除文件
d命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -u (Update)
  -w (Working Dir)
  -x (Exclude)
</code></pre>
<pre><code>e： Extract解压文件至当前目录或指定目录
e命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)
</code></pre>
<p>l： Lists contents of archive.<br>
t： Test<br>
u： Update</p>
<pre><code>x： eXtract with full paths用文件的完整路径解压至当前目录或指定目录
x命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)
</code></pre>
<h3 id="七-调用vbscript程序">七、调用VBScript程序</h3>
<p>使用 Windows 脚本宿主，可以在命令提示符下运行脚本。CScript.exe 提供了用于设置脚本属性的命令行开关。<br>
用法：CScript 脚本名称 [脚本选项...] [脚本参数...]<br>
选项：</p>
<pre><code>//B         批模式：不显示脚本错误及提示信息
//D         启用 Active Debugging
//E:engine  使用执行脚本的引擎
//H:CScript 将默认的脚本宿主改为 CScript.exe
//H:WScript 将默认的脚本宿主改为 WScript.exe （默认）
//I         交互模式（默认，与 //B 相对)
//Job:xxxx  执行一个 WSF 工作
//Logo      显示徽标（默认）
//Nologo    不显示徽标：执行时不显示标志
//S         为该用户保存当前命令行选项
//T:nn      超时设定秒：允许脚本运行的最长时间
//X         在调试器中执行脚本
//U         用 Unicode 表示来自控制台的重定向 I/O
</code></pre>
<p>“脚本名称”是带有扩展名和必需的路径信息的脚本文件名称，如<code>d:\admin\vbscripts\chart.vbs。</code><br>
“脚本选项和参数”将传递给脚本。脚本参数前面有一个斜杠 (/)。每个参数都是可选的；但不能在未指定脚本名称的情况下指定脚本选项。<br>
如果未指定参数，则 CScript 将显示 CScript 语法和有效的宿主参数。</p>
<h3 id="八-将批处理转化为可执行文件">八、将批处理转化为可执行文件：</h3>
<p>由于批处理文件是一种文本文件，任何人都可以对其进行随便编辑，不小心就会把里面的命令破坏掉，所以如果将其转换成.com格式的可执行文件，不仅执行效率会大大提高，而且不会破坏原来的功能，更能将优先级提到最高。Bat2Com就可以完成这个转换工作。</p>
<p>小知识：在DOS环境下，可执行文件的优先级由高到低依次为.com&gt;.exe&gt;.bat&gt;.cmd，即如果在同一目录下存在文件名相同的这四类文件，当只<br>
键入文件名时，DOS执行的是name.com，如果需要执行其他三个文件，则必须指定文件的全名，如name.bat。<br>
这是一个只有5.43K大小的免费绿色工具，可以运行在纯DOS或DOS窗口的命令行中，用法：<code>Bat2ComFileName</code>，这样就会在同一目录下生成一个名为FileNme.com的可执行文件，执行的效果和原来的.bat文件一样。</p>
<h3 id="九-时间延迟">九、时间延迟</h3>
<p>本条引用[英雄]教程<br>
什么是时间延迟？顾名思义，就是执行一条命令后延迟一段时间再进行下一条命令。<br>
1、利用ping命令延时<br>
例：</p>
<pre><code>  @echo off
  echo 延时前！
  ping /n 3 127.0.0.1 &gt;nul
  echo 延时后！
  pause
</code></pre>
<p>解说：用到了ping命令的“/n”参数，表示要发送多少次请求到指定的ip。本例中要发送3次请求到本机的ip（127.0.0.1）。127.0.0.1可简写为127.1。“&gt;nul”就是屏蔽掉ping命令所显示的内容。<br>
2、利用for命令延时<br>
例：</p>
<pre><code>  @echo off
  echo 延时前！
  for /l %%i in (1,1,5000) do echo %%i&gt;nul
  echo 延时后！
  pause
</code></pre>
<p>解说：原理很简单，就是利用一个计次循环并屏蔽它所显示的内容来达到延时的目的。</p>
<h3 id="十-模拟进度条">十、模拟进度条</h3>
<p>下面给出一个模拟进度条的程序。如果将它运用在你自己的程序中，可以使你的程序更漂亮。</p>
<pre><code>@echo off
mode con cols=113 lines=15 &amp;color 9f
cls
echo.
echo  程序正在初始化. . .
echo.
echo  ┌──────────────────────────────────────┐
set/p=  ■&lt;nul
for /L %%i in (1 1 38) do set /p a=■&lt;nul&amp;ping /n 1 127.0.0.1&gt;nul
echo   100%%
echo  └──────────────────────────────────────┘
pause
</code></pre>
<p>解说：<code>“set /p a=■&lt;nul”</code>的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping /n 0 127.1&gt;nul”是输出每个“■”的时间间隔，即每隔多少时间输出一个“■”。</p>
]]></content>
    </entry>
</feed>